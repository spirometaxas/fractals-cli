const { TSquare } = require('../../src/fractals/tSquare');
const { Utils } = require('../../src/utils');

describe('TSquare Tests', () => {
    test('generate n=0', () => {
        let expected = [
            '████',
            '████',
        ];

        let result = new TSquare().create(0, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1', () => {
        let expected = [
            '████    ████',
            '████████████',
            '  ████████  ',
            '  ████████  ',
            '████████████',
            '████    ████',
        ];

        let result = new TSquare().create(1, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2', () => {
        let expected = [
            '████    ████    ████    ████',
            '████████████    ████████████',
            '  ████████        ████████  ',
            '  ████████████████████████  ',
            '████████████████████████████',
            '████  ████████████████  ████',
            '      ████████████████      ',
            '      ████████████████      ',
            '████  ████████████████  ████',
            '████████████████████████████',
            '  ████████████████████████  ',
            '  ████████        ████████  ',
            '████████████    ████████████',
            '████    ████    ████    ████',
        ];

        let result = new TSquare().create(2, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3', () => {
        let expected = [
            '████    ████    ████    ████    ████    ████    ████    ████',
            '████████████    ████████████    ████████████    ████████████',
            '  ████████        ████████        ████████        ████████  ',
            '  ████████████████████████        ████████████████████████  ',
            '████████████████████████████    ████████████████████████████',
            '████  ████████████████  ████    ████  ████████████████  ████',
            '      ████████████████                ████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '████  ████████████████████████████████████████████████  ████',
            '████████████████████████████████████████████████████████████',
            '  ████████████████████████████████████████████████████████  ',
            '  ████████    ████████████████████████████████    ████████  ',
            '████████████  ████████████████████████████████  ████████████',
            '████    ████  ████████████████████████████████  ████    ████',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '████    ████  ████████████████████████████████  ████    ████',
            '████████████  ████████████████████████████████  ████████████',
            '  ████████    ████████████████████████████████    ████████  ',
            '  ████████████████████████████████████████████████████████  ',
            '████████████████████████████████████████████████████████████',
            '████  ████████████████████████████████████████████████  ████',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████                ████████████████      ',
            '████  ████████████████  ████    ████  ████████████████  ████',
            '████████████████████████████    ████████████████████████████',
            '  ████████████████████████        ████████████████████████  ',
            '  ████████        ████████        ████████        ████████  ',
            '████████████    ████████████    ████████████    ████████████',
            '████    ████    ████    ████    ████    ████    ████    ████',
        ];

        let result = new TSquare().create(3, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0', () => {
        let expected = [
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
        ];

        let result = new TSquare().create(3, { step: 0 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1', () => {
        let expected = [
            '                                                            ',
            '                                                            ',
            '                                                            ',
            '      ████████████████                ████████████████      ',
            '      ████████████████                ████████████████      ',
            '      ████████████████                ████████████████      ',
            '      ████████████████                ████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████                ████████████████      ',
            '      ████████████████                ████████████████      ',
            '      ████████████████                ████████████████      ',
            '      ████████████████                ████████████████      ',
            '                                                            ',
            '                                                            ',
            '                                                            ',
        ];

        let result = new TSquare().create(3, { step: 1 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2', () => {
        let expected = [
            '                                                            ',
            '  ████████        ████████        ████████        ████████  ',
            '  ████████        ████████        ████████        ████████  ',
            '  ████████████████████████        ████████████████████████  ',
            '  ████████████████████████        ████████████████████████  ',
            '      ████████████████                ████████████████      ',
            '      ████████████████                ████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '  ████████████████████████████████████████████████████████  ',
            '  ████████████████████████████████████████████████████████  ',
            '  ████████    ████████████████████████████████    ████████  ',
            '  ████████    ████████████████████████████████    ████████  ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '  ████████    ████████████████████████████████    ████████  ',
            '  ████████    ████████████████████████████████    ████████  ',
            '  ████████████████████████████████████████████████████████  ',
            '  ████████████████████████████████████████████████████████  ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████                ████████████████      ',
            '      ████████████████                ████████████████      ',
            '  ████████████████████████        ████████████████████████  ',
            '  ████████████████████████        ████████████████████████  ',
            '  ████████        ████████        ████████        ████████  ',
            '  ████████        ████████        ████████        ████████  ',
            '                                                            ',
        ];

        let result = new TSquare().create(3, { step: 2 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3', () => {
        let expected = [
            '████    ████    ████    ████    ████    ████    ████    ████',
            '████████████    ████████████    ████████████    ████████████',
            '  ████████        ████████        ████████        ████████  ',
            '  ████████████████████████        ████████████████████████  ',
            '████████████████████████████    ████████████████████████████',
            '████  ████████████████  ████    ████  ████████████████  ████',
            '      ████████████████                ████████████████      ',
            '      ████████████████████████████████████████████████      ',
            '████  ████████████████████████████████████████████████  ████',
            '████████████████████████████████████████████████████████████',
            '  ████████████████████████████████████████████████████████  ',
            '  ████████    ████████████████████████████████    ████████  ',
            '████████████  ████████████████████████████████  ████████████',
            '████    ████  ████████████████████████████████  ████    ████',
            '              ████████████████████████████████              ',
            '              ████████████████████████████████              ',
            '████    ████  ████████████████████████████████  ████    ████',
            '████████████  ████████████████████████████████  ████████████',
            '  ████████    ████████████████████████████████    ████████  ',
            '  ████████████████████████████████████████████████████████  ',
            '████████████████████████████████████████████████████████████',
            '████  ████████████████████████████████████████████████  ████',
            '      ████████████████████████████████████████████████      ',
            '      ████████████████                ████████████████      ',
            '████  ████████████████  ████    ████  ████████████████  ████',
            '████████████████████████████    ████████████████████████████',
            '  ████████████████████████        ████████████████████████  ',
            '  ████████        ████████        ████████        ████████  ',
            '████████████    ████████████    ████████████    ████████████',
            '████    ████    ████    ████    ████    ████    ████    ████',
        ];

        let result = new TSquare().create(3, { step: 3 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 mode=lines', () => {
        let expected = [
            '┌───┐',
            '│   │',
            '└───┘',
        ];

        let result = new TSquare().create(0, { mode: 'lines' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 mode=lines', () => {
        let expected = [
            '┌───┐   ┌───┐',
            '│   ├───┤   │',
            '└─┬─┘   └─┬─┘',
            '  │       │  ',
            '┌─┴─┐   ┌─┴─┐',
            '│   ├───┤   │',
            '└───┘   └───┘',
        ];

        let result = new TSquare().create(1, { mode: 'lines' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 mode=lines', () => {
        let expected = [
            '┌───┐   ┌───┐   ┌───┐   ┌───┐',
            '│   ├───┤   │   │   ├───┤   │',
            '└─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘',
            '  │       ├───────┤       │  ',
            '┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐',
            '│   ├─┬─┤   │   │   ├─┬─┤   │',
            '└───┘ │ └───┘   └───┘ │ └───┘',
            '      │               │      ',
            '┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐',
            '│   ├─┴─┤   │   │   ├─┴─┤   │',
            '└─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘',
            '  │       ├───────┤       │  ',
            '┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐',
            '│   ├───┤   │   │   ├───┤   │',
            '└───┘   └───┘   └───┘   └───┘',
        ];

        let result = new TSquare().create(2, { mode: 'lines' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 mode=lines', () => {
        let expected = [
            '┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐',
            '│   ├───┤   │   │   ├───┤   │   │   ├───┤   │   │   ├───┤   │',
            '└─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘',
            '  │       ├───────┤       │       │       ├───────┤       │  ',
            '┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐',
            '│   ├─┬─┤   │   │   ├─┬─┤   │   │   ├─┬─┤   │   │   ├─┬─┤   │',
            '└───┘ │ └───┘   └───┘ │ └───┘   └───┘ │ └───┘   └───┘ │ └───┘',
            '      │               ├───────────────┤               │      ',
            '┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐',
            '│   ├─┴─┤   │   │   ├─┴─┤   │   │   ├─┴─┤   │   │   ├─┴─┤   │',
            '└─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘',
            '  │       ├───┬───┤       │       │       ├───┬───┤       │  ',
            '┌─┴─┐   ┌─┴─┐ │ ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐ │ ┌─┴─┐   ┌─┴─┐',
            '│   ├───┤   │ │ │   ├───┤   │   │   ├───┤   │ │ │   ├───┤   │',
            '└───┘   └───┘ │ └───┘   └───┘   └───┘   └───┘ │ └───┘   └───┘',
            '              │                               │              ',
            '┌───┐   ┌───┐ │ ┌───┐   ┌───┐   ┌───┐   ┌───┐ │ ┌───┐   ┌───┐',
            '│   ├───┤   │ │ │   ├───┤   │   │   ├───┤   │ │ │   ├───┤   │',
            '└─┬─┘   └─┬─┘ │ └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘ │ └─┬─┘   └─┬─┘',
            '  │       ├───┴───┤       │       │       ├───┴───┤       │  ',
            '┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐',
            '│   ├─┬─┤   │   │   ├─┬─┤   │   │   ├─┬─┤   │   │   ├─┬─┤   │',
            '└───┘ │ └───┘   └───┘ │ └───┘   └───┘ │ └───┘   └───┘ │ └───┘',
            '      │               ├───────────────┤               │      ',
            '┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐',
            '│   ├─┴─┤   │   │   ├─┴─┤   │   │   ├─┴─┤   │   │   ├─┴─┤   │',
            '└─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘',
            '  │       ├───────┤       │       │       ├───────┤       │  ',
            '┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐',
            '│   ├───┤   │   │   ├───┤   │   │   ├───┤   │   │   ├───┤   │',
            '└───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘',
        ];

        let result = new TSquare().create(3, { mode: 'lines' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 mode=lines', () => {
        let expected = [
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '              ┌───────────────────────────────┐              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              └───────────────────────────────┘              ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
        ];

        let result = new TSquare().create(3, { step: 0, mode: 'lines' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 mode=lines', () => {
        let expected = [
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '      ┌───────────────┐               ┌───────────────┐      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │               ├───────────────┤               │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      └───────┬───────┘               └───────┬───────┘      ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '      ┌───────┴───────┐               ┌───────┴───────┐      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │               ├───────────────┤               │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      └───────────────┘               └───────────────┘      ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
        ];

        let result = new TSquare().create(3, { step: 1, mode: 'lines' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 mode=lines', () => {
        let expected = [
            '                                                             ',
            '  ┌───────┐       ┌───────┐       ┌───────┐       ┌───────┐  ',
            '  │       │       │       │       │       │       │       │  ',
            '  │       ├───────┤       │       │       ├───────┤       │  ',
            '  │       │       │       │       │       │       │       │  ',
            '  └───┬───┘       └───┬───┘       └───┬───┘       └───┬───┘  ',
            '      │               │               │               │      ',
            '      │               ├───────────────┤               │      ',
            '      │               │               │               │      ',
            '  ┌───┴───┐       ┌───┴───┐       ┌───┴───┐       ┌───┴───┐  ',
            '  │       │       │       │       │       │       │       │  ',
            '  │       ├───┬───┤       │       │       ├───┬───┤       │  ',
            '  │       │   │   │       │       │       │   │   │       │  ',
            '  └───────┘   │   └───────┘       └───────┘   │   └───────┘  ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '  ┌───────┐   │   ┌───────┐       ┌───────┐   │   ┌───────┐  ',
            '  │       │   │   │       │       │       │   │   │       │  ',
            '  │       ├───┴───┤       │       │       ├───┴───┤       │  ',
            '  │       │       │       │       │       │       │       │  ',
            '  └───┬───┘       └───┬───┘       └───┬───┘       └───┬───┘  ',
            '      │               │               │               │      ',
            '      │               ├───────────────┤               │      ',
            '      │               │               │               │      ',
            '  ┌───┴───┐       ┌───┴───┐       ┌───┴───┐       ┌───┴───┐  ',
            '  │       │       │       │       │       │       │       │  ',
            '  │       ├───────┤       │       │       ├───────┤       │  ',
            '  │       │       │       │       │       │       │       │  ',
            '  └───────┘       └───────┘       └───────┘       └───────┘  ',
            '                                                             ',
        ];

        let result = new TSquare().create(3, { step: 2, mode: 'lines' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 mode=lines', () => {
        let expected = [
            '┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐',
            '│   ├───┤   │   │   ├───┤   │   │   ├───┤   │   │   ├───┤   │',
            '└─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘',
            '  │       ├───────┤       │       │       ├───────┤       │  ',
            '┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐',
            '│   ├─┬─┤   │   │   ├─┬─┤   │   │   ├─┬─┤   │   │   ├─┬─┤   │',
            '└───┘ │ └───┘   └───┘ │ └───┘   └───┘ │ └───┘   └───┘ │ └───┘',
            '      │               ├───────────────┤               │      ',
            '┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐',
            '│   ├─┴─┤   │   │   ├─┴─┤   │   │   ├─┴─┤   │   │   ├─┴─┤   │',
            '└─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘',
            '  │       ├───┬───┤       │       │       ├───┬───┤       │  ',
            '┌─┴─┐   ┌─┴─┐ │ ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐ │ ┌─┴─┐   ┌─┴─┐',
            '│   ├───┤   │ │ │   ├───┤   │   │   ├───┤   │ │ │   ├───┤   │',
            '└───┘   └───┘ │ └───┘   └───┘   └───┘   └───┘ │ └───┘   └───┘',
            '              │                               │              ',
            '┌───┐   ┌───┐ │ ┌───┐   ┌───┐   ┌───┐   ┌───┐ │ ┌───┐   ┌───┐',
            '│   ├───┤   │ │ │   ├───┤   │   │   ├───┤   │ │ │   ├───┤   │',
            '└─┬─┘   └─┬─┘ │ └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘ │ └─┬─┘   └─┬─┘',
            '  │       ├───┴───┤       │       │       ├───┴───┤       │  ',
            '┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐',
            '│   ├─┬─┤   │   │   ├─┬─┤   │   │   ├─┬─┤   │   │   ├─┬─┤   │',
            '└───┘ │ └───┘   └───┘ │ └───┘   └───┘ │ └───┘   └───┘ │ └───┘',
            '      │               ├───────────────┤               │      ',
            '┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐   ┌───┐ │ ┌───┐',
            '│   ├─┴─┤   │   │   ├─┴─┤   │   │   ├─┴─┤   │   │   ├─┴─┤   │',
            '└─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘   └─┬─┘',
            '  │       ├───────┤       │       │       ├───────┤       │  ',
            '┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐   ┌─┴─┐',
            '│   ├───┤   │   │   ├───┤   │   │   ├───┤   │   │   ├───┤   │',
            '└───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘',
        ];

        let result = new TSquare().create(3, { step: 3, mode: 'lines' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 mode=lines inverse=true', () => {
        let expected = [
            '┌───┐',
            '│   │',
            '└───┘',
        ];

        let result = new TSquare().create(0, { mode: 'lines', inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 mode=lines inverse=true', () => {
        let expected = [
            '┌───┐   ┌───┐',
            '│ ┌─┴───┴─┐ │',
            '└─┤       ├─┘',
            '  │       │  ',
            '┌─┤       ├─┐',
            '│ └─┬───┬─┘ │',
            '└───┘   └───┘',
        ];

        let result = new TSquare().create(1, { mode: 'lines', inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 mode=lines inverse=true', () => {
        let expected = [
            '┌───┐   ┌───┐   ┌───┐   ┌───┐',
            '│ ┌─┴───┴─┐ │   │ ┌─┴───┴─┐ │',
            '└─┤       ├─┘   └─┤       ├─┘',
            '  │   ┌───┴───────┴───┐   │  ',
            '┌─┤   │               │   ├─┐',
            '│ └─┬─┤               ├─┬─┘ │',
            '└───┘ │               │ └───┘',
            '      │               │      ',
            '┌───┐ │               │ ┌───┐',
            '│ ┌─┴─┤               ├─┴─┐ │',
            '└─┤   │               │   ├─┘',
            '  │   └───┬───────┬───┘   │  ',
            '┌─┤       ├─┐   ┌─┤       ├─┐',
            '│ └─┬───┬─┘ │   │ └─┬───┬─┘ │',
            '└───┘   └───┘   └───┘   └───┘',
        ];

        let result = new TSquare().create(2, { mode: 'lines', inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 mode=lines inverse=true', () => {
        let expected = [
            '┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐',
            '│ ┌─┴───┴─┐ │   │ ┌─┴───┴─┐ │   │ ┌─┴───┴─┐ │   │ ┌─┴───┴─┐ │',
            '└─┤       ├─┘   └─┤       ├─┘   └─┤       ├─┘   └─┤       ├─┘',
            '  │   ┌───┴───────┴───┐   │       │   ┌───┴───────┴───┐   │  ',
            '┌─┤   │               │   ├─┐   ┌─┤   │               │   ├─┐',
            '│ └─┬─┤               ├─┬─┘ │   │ └─┬─┤               ├─┬─┘ │',
            '└───┘ │               │ └───┘   └───┘ │               │ └───┘',
            '      │       ┌───────┴───────────────┴───────┐       │      ',
            '┌───┐ │       │                               │       │ ┌───┐',
            '│ ┌─┴─┤       │                               │       ├─┴─┐ │',
            '└─┤   │       │                               │       │   ├─┘',
            '  │   └───┬───┤                               ├───┬───┘   │  ',
            '┌─┤       ├─┐ │                               │ ┌─┤       ├─┐',
            '│ └─┬───┬─┘ │ │                               │ │ └─┬───┬─┘ │',
            '└───┘   └───┘ │                               │ └───┘   └───┘',
            '              │                               │              ',
            '┌───┐   ┌───┐ │                               │ ┌───┐   ┌───┐',
            '│ ┌─┴───┴─┐ │ │                               │ │ ┌─┴───┴─┐ │',
            '└─┤       ├─┘ │                               │ └─┤       ├─┘',
            '  │   ┌───┴───┤                               ├───┴───┐   │  ',
            '┌─┤   │       │                               │       │   ├─┐',
            '│ └─┬─┤       │                               │       ├─┬─┘ │',
            '└───┘ │       │                               │       │ └───┘',
            '      │       └───────┬───────────────┬───────┘       │      ',
            '┌───┐ │               │ ┌───┐   ┌───┐ │               │ ┌───┐',
            '│ ┌─┴─┤               ├─┴─┐ │   │ ┌─┴─┤               ├─┴─┐ │',
            '└─┤   │               │   ├─┘   └─┤   │               │   ├─┘',
            '  │   └───┬───────┬───┘   │       │   └───┬───────┬───┘   │  ',
            '┌─┤       ├─┐   ┌─┤       ├─┐   ┌─┤       ├─┐   ┌─┤       ├─┐',
            '│ └─┬───┬─┘ │   │ └─┬───┬─┘ │   │ └─┬───┬─┘ │   │ └─┬───┬─┘ │',
            '└───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘',
        ];

        let result = new TSquare().create(3, { mode: 'lines', inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 mode=lines inverse=true', () => {
        let expected = [
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '              ┌───────────────────────────────┐              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              └───────────────────────────────┘              ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
        ];

        let result = new TSquare().create(3, { step: 0, mode: 'lines', inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 mode=lines inverse=true', () => {
        let expected = [
            '                                                             ',
            '                                                             ',
            '                                                             ',
            '      ┌───────────────┐               ┌───────────────┐      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │       ┌───────┴───────────────┴───────┐       │      ',
            '      │       │                               │       │      ',
            '      │       │                               │       │      ',
            '      │       │                               │       │      ',
            '      └───────┤                               ├───────┘      ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '      ┌───────┤                               ├───────┐      ',
            '      │       │                               │       │      ',
            '      │       │                               │       │      ',
            '      │       │                               │       │      ',
            '      │       └───────┬───────────────┬───────┘       │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      │               │               │               │      ',
            '      └───────────────┘               └───────────────┘      ',
            '                                                             ',
            '                                                             ',
            '                                                             ',
        ];

        let result = new TSquare().create(3, { step: 1, mode: 'lines', inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 mode=lines inverse=true', () => {
        let expected = [
            '                                                             ',
            '  ┌───────┐       ┌───────┐       ┌───────┐       ┌───────┐  ',
            '  │       │       │       │       │       │       │       │  ',
            '  │   ┌───┴───────┴───┐   │       │   ┌───┴───────┴───┐   │  ',
            '  │   │               │   │       │   │               │   │  ',
            '  └───┤               ├───┘       └───┤               ├───┘  ',
            '      │               │               │               │      ',
            '      │       ┌───────┴───────────────┴───────┐       │      ',
            '      │       │                               │       │      ',
            '  ┌───┤       │                               │       ├───┐  ',
            '  │   │       │                               │       │   │  ',
            '  │   └───┬───┤                               ├───┬───┘   │  ',
            '  │       │   │                               │   │       │  ',
            '  └───────┘   │                               │   └───────┘  ',
            '              │                               │              ',
            '              │                               │              ',
            '              │                               │              ',
            '  ┌───────┐   │                               │   ┌───────┐  ',
            '  │       │   │                               │   │       │  ',
            '  │   ┌───┴───┤                               ├───┴───┐   │  ',
            '  │   │       │                               │       │   │  ',
            '  └───┤       │                               │       ├───┘  ',
            '      │       │                               │       │      ',
            '      │       └───────┬───────────────┬───────┘       │      ',
            '      │               │               │               │      ',
            '  ┌───┤               ├───┐       ┌───┤               ├───┐  ',
            '  │   │               │   │       │   │               │   │  ',
            '  │   └───┬───────┬───┘   │       │   └───┬───────┬───┘   │  ',
            '  │       │       │       │       │       │       │       │  ',
            '  └───────┘       └───────┘       └───────┘       └───────┘  ',
            '                                                             ',
        ];

        let result = new TSquare().create(3, { step: 2, mode: 'lines', inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 mode=lines inverse=true', () => {
        let expected = [
            '┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐',
            '│ ┌─┴───┴─┐ │   │ ┌─┴───┴─┐ │   │ ┌─┴───┴─┐ │   │ ┌─┴───┴─┐ │',
            '└─┤       ├─┘   └─┤       ├─┘   └─┤       ├─┘   └─┤       ├─┘',
            '  │   ┌───┴───────┴───┐   │       │   ┌───┴───────┴───┐   │  ',
            '┌─┤   │               │   ├─┐   ┌─┤   │               │   ├─┐',
            '│ └─┬─┤               ├─┬─┘ │   │ └─┬─┤               ├─┬─┘ │',
            '└───┘ │               │ └───┘   └───┘ │               │ └───┘',
            '      │       ┌───────┴───────────────┴───────┐       │      ',
            '┌───┐ │       │                               │       │ ┌───┐',
            '│ ┌─┴─┤       │                               │       ├─┴─┐ │',
            '└─┤   │       │                               │       │   ├─┘',
            '  │   └───┬───┤                               ├───┬───┘   │  ',
            '┌─┤       ├─┐ │                               │ ┌─┤       ├─┐',
            '│ └─┬───┬─┘ │ │                               │ │ └─┬───┬─┘ │',
            '└───┘   └───┘ │                               │ └───┘   └───┘',
            '              │                               │              ',
            '┌───┐   ┌───┐ │                               │ ┌───┐   ┌───┐',
            '│ ┌─┴───┴─┐ │ │                               │ │ ┌─┴───┴─┐ │',
            '└─┤       ├─┘ │                               │ └─┤       ├─┘',
            '  │   ┌───┴───┤                               ├───┴───┐   │  ',
            '┌─┤   │       │                               │       │   ├─┐',
            '│ └─┬─┤       │                               │       ├─┬─┘ │',
            '└───┘ │       │                               │       │ └───┘',
            '      │       └───────┬───────────────┬───────┘       │      ',
            '┌───┐ │               │ ┌───┐   ┌───┐ │               │ ┌───┐',
            '│ ┌─┴─┤               ├─┴─┐ │   │ ┌─┴─┤               ├─┴─┐ │',
            '└─┤   │               │   ├─┘   └─┤   │               │   ├─┘',
            '  │   └───┬───────┬───┘   │       │   └───┬───────┬───┘   │  ',
            '┌─┤       ├─┐   ┌─┤       ├─┐   ┌─┤       ├─┐   ┌─┤       ├─┐',
            '│ └─┬───┬─┘ │   │ └─┬───┬─┘ │   │ └─┬───┬─┘ │   │ └─┬───┬─┘ │',
            '└───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘',
        ];

        let result = new TSquare().create(3, { step: 3, mode: 'lines', inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });
});