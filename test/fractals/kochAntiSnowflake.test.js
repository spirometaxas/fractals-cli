const { KochAntiSnowflake } = require('../../src/fractals/kochAntiSnowflake');
const { Utils } = require('../../src/utils');

describe('KochAntiSnowflake Tests', () => {
    test('generate n=0', () => {
        let expected = [
            '▲',
        ];

        let result = new KochAntiSnowflake().create(0, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1', () => {
        let expected = [
            '  ▲  ',
            '  ▼  ',
            '▲▼ ▼▲',
        ];

        let result = new KochAntiSnowflake().create(1, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2', () => {
        let expected = [
            '        ▲        ',
            '        ▼        ',
            '      ▲▼▲▼▲      ',
            '      ▼▲▼▲▼      ',
            '        ▲        ',
            '        ▼        ',
            '  ▲▼▲ ▲▼ ▼▲ ▲▼▲  ',
            '  ▼▲▼▲     ▲▼▲▼  ',
            '▲▼ ▼▲▼     ▼▲▼ ▼▲',
        ];

        let result = new KochAntiSnowflake().create(2, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3', () => {
        let expected = [
            '                          ▲                          ',
            '                          ▼                          ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                    ▲▼▲ ▲▼▲▼▲ ▲▼▲                    ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                    ▼▲▼ ▼▲▼▲▼ ▼▲▼                    ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                          ▲                          ',
            '                          ▼                          ',
            '        ▲▼▲ ▲▼▲     ▲▼▲ ▲▼ ▼▲ ▲▼▲     ▲▼▲ ▲▼▲        ',
            '        ▼▲▼▲▼▲▼     ▼▲▼▲     ▲▼▲▼     ▼▲▼▲▼▲▼        ',
            '      ▲▼▲▼▲▼▲▼▲▼▲ ▲▼ ▼▲▼     ▼▲▼ ▼▲ ▲▼▲▼▲▼▲▼▲▼▲      ',
            '      ▼▲▼▲▼▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲▼▲▼▲▼      ',
            '        ▲▼▲▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼▲▼▲        ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲             ▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '  ▲▼▲ ▲▼ ▼▲▼▲▼▲▼▲▼▲▼             ▼▲▼▲▼▲▼▲▼▲▼ ▼▲ ▲▼▲  ',
            '  ▼▲▼▲     ▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲     ▲▼▲▼  ',
            '▲▼ ▼▲▼     ▼▲▼ ▼▲▼                 ▼▲▼ ▼▲▼     ▼▲▼ ▼▲',
        ];

        let result = new KochAntiSnowflake().create(3, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0', () => {
        let expected = [
            '                          ▲                          ',
            '                         ▲▼▲                         ',
            '                        ▲▼▲▼▲                        ',
            '                       ▲▼▲▼▲▼▲                       ',
            '                      ▲▼▲▼▲▼▲▼▲                      ',
            '                     ▲▼▲▼▲▼▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '               ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲               ',
            '              ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲              ',
            '             ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲             ',
            '            ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲            ',
            '           ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲           ',
            '          ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲          ',
            '         ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲         ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲       ',
            '      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲      ',
            '     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲     ',
            '    ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲    ',
            '   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ',
            '  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲  ',
            ' ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ',
            '▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲',
        ];

        let result = new KochAntiSnowflake().create(3, { step: 0 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1', () => {
        let expected = [
            '                          ▲                          ',
            '                         ▲▼▲                         ',
            '                        ▲▼▲▼▲                        ',
            '                       ▲▼▲▼▲▼▲                       ',
            '                      ▲▼▲▼▲▼▲▼▲                      ',
            '                     ▲▼▲▼▲▼▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼▲▼▲▼▲▼                     ',
            '                      ▼▲▼▲▼▲▼▲▼                      ',
            '                       ▼▲▼▲▼▲▼                       ',
            '                        ▼▲▼▲▼                        ',
            '                         ▼▲▼                         ',
            '                          ▼                          ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲       ',
            '      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲      ',
            '     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲     ',
            '    ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲    ',
            '   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼           ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ',
            '  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼             ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲  ',
            ' ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼               ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ',
            '▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲',
        ];

        let result = new KochAntiSnowflake().create(3, { step: 1 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2', () => {
        let expected = [
            '                          ▲                          ',
            '                         ▲▼▲                         ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                         ▼▲▼                         ',
            '                          ▼                          ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                          ▲                          ',
            '                         ▲▼▲                         ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                         ▼▲▼                         ',
            '                          ▼                          ',
            '        ▲▼▲▼▲▼▲     ▲▼▲▼▲▼ ▼▲▼▲▼▲     ▲▼▲▼▲▼▲        ',
            '       ▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼   ▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲       ',
            '      ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼     ▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲      ',
            '      ▼▲▼▲▼▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲▼▲▼▲▼      ',
            '       ▼▲▼▲▼▲▼▲▼▲▼▲               ▲▼▲▼▲▼▲▼▲▼▲▼       ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲             ▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '  ▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼             ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲  ',
            ' ▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼               ▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲ ',
            '▲▼▲▼▲▼     ▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼     ▼▲▼▲▼▲',
        ];

        let result = new KochAntiSnowflake().create(3, { step: 2 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3', () => {
        let expected = [
            '                          ▲                          ',
            '                          ▼                          ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                    ▲▼▲ ▲▼▲▼▲ ▲▼▲                    ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                    ▼▲▼ ▼▲▼▲▼ ▼▲▼                    ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                          ▲                          ',
            '                          ▼                          ',
            '        ▲▼▲ ▲▼▲     ▲▼▲ ▲▼ ▼▲ ▲▼▲     ▲▼▲ ▲▼▲        ',
            '        ▼▲▼▲▼▲▼     ▼▲▼▲     ▲▼▲▼     ▼▲▼▲▼▲▼        ',
            '      ▲▼▲▼▲▼▲▼▲▼▲ ▲▼ ▼▲▼     ▼▲▼ ▼▲ ▲▼▲▼▲▼▲▼▲▼▲      ',
            '      ▼▲▼▲▼▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲▼▲▼▲▼      ',
            '        ▲▼▲▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼▲▼▲        ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲             ▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '  ▲▼▲ ▲▼ ▼▲▼▲▼▲▼▲▼▲▼             ▼▲▼▲▼▲▼▲▼▲▼ ▼▲ ▲▼▲  ',
            '  ▼▲▼▲     ▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲     ▲▼▲▼  ',
            '▲▼ ▼▲▼     ▼▲▼ ▼▲▼                 ▼▲▼ ▼▲▼     ▼▲▼ ▼▲',
        ];

        let result = new KochAntiSnowflake().create(3, { step: 3 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 rotation=flip', () => {
        let expected = [
            '▼',
        ];

        let result = new KochAntiSnowflake().create(0, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 rotation=flip', () => {
        let expected = [
            '▼▲ ▲▼',
            '  ▲  ',
            '  ▼  ',
        ];

        let result = new KochAntiSnowflake().create(1, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 rotation=flip', () => {
        let expected = [
            '▼▲ ▲▼▲     ▲▼▲ ▲▼',
            '  ▲▼▲▼     ▼▲▼▲  ',
            '  ▼▲▼ ▼▲ ▲▼ ▼▲▼  ',
            '        ▲        ',
            '        ▼        ',
            '      ▲▼▲▼▲      ',
            '      ▼▲▼▲▼      ',
            '        ▲        ',
            '        ▼        ',
        ];

        let result = new KochAntiSnowflake().create(2, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 rotation=flip', () => {
        let expected = [
            '▼▲ ▲▼▲     ▲▼▲ ▲▼▲                 ▲▼▲ ▲▼▲     ▲▼▲ ▲▼',
            '  ▲▼▲▼     ▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼     ▼▲▼▲  ',
            '  ▼▲▼ ▼▲ ▲▼▲▼▲▼▲▼▲▼▲             ▲▼▲▼▲▼▲▼▲▼▲ ▲▼ ▼▲▼  ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼             ▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '        ▼▲▼▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲▼▲▼        ',
            '      ▲▼▲▼▲▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼▲▼▲▼▲      ',
            '      ▼▲▼▲▼▲▼▲▼▲▼ ▼▲ ▲▼▲     ▲▼▲ ▲▼ ▼▲▼▲▼▲▼▲▼▲▼      ',
            '        ▲▼▲▼▲▼▲     ▲▼▲▼     ▼▲▼▲     ▲▼▲▼▲▼▲        ',
            '        ▼▲▼ ▼▲▼     ▼▲▼ ▼▲ ▲▼ ▼▲▼     ▼▲▼ ▼▲▼        ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                    ▲▼▲ ▲▼▲▼▲ ▲▼▲                    ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                    ▼▲▼ ▼▲▼▲▼ ▼▲▼                    ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                          ▲                          ',
            '                          ▼                          ',
        ];

        let result = new KochAntiSnowflake().create(3, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 rotation=flip', () => {
        let expected = [
            '▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼',
            ' ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ',
            '  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼  ',
            '   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ',
            '    ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼    ',
            '     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼     ',
            '      ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼      ',
            '       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼       ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '         ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼         ',
            '          ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼          ',
            '           ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼           ',
            '            ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼            ',
            '             ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼             ',
            '              ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼              ',
            '               ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼               ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼▲▼▲▼▲▼                     ',
            '                      ▼▲▼▲▼▲▼▲▼                      ',
            '                       ▼▲▼▲▼▲▼                       ',
            '                        ▼▲▼▲▼                        ',
            '                         ▼▲▼                         ',
            '                          ▼                          ',
        ];

        let result = new KochAntiSnowflake().create(3, { step: 0, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 rotation=flip', () => {
        let expected = [
            '▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼',
            ' ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲               ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ',
            '  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲             ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼  ',
            '   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲           ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ',
            '    ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼    ',
            '     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼     ',
            '      ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼      ',
            '       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼       ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '                          ▲                          ',
            '                         ▲▼▲                         ',
            '                        ▲▼▲▼▲                        ',
            '                       ▲▼▲▼▲▼▲                       ',
            '                      ▲▼▲▼▲▼▲▼▲                      ',
            '                     ▲▼▲▼▲▼▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼▲▼▲▼▲▼                     ',
            '                      ▼▲▼▲▼▲▼▲▼                      ',
            '                       ▼▲▼▲▼▲▼                       ',
            '                        ▼▲▼▲▼                        ',
            '                         ▼▲▼                         ',
            '                          ▼                          ',
        ];

        let result = new KochAntiSnowflake().create(3, { step: 1, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 rotation=flip', () => {
        let expected = [
            '▼▲▼▲▼▲     ▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲     ▲▼▲▼▲▼',
            ' ▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲               ▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼ ',
            '  ▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲             ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼  ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼             ▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '       ▲▼▲▼▲▼▲▼▲▼▲▼               ▼▲▼▲▼▲▼▲▼▲▼▲       ',
            '      ▲▼▲▼▲▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼▲▼▲▼▲      ',
            '      ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲     ▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼      ',
            '       ▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲   ▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼       ',
            '        ▼▲▼▲▼▲▼     ▼▲▼▲▼▲ ▲▼▲▼▲▼     ▼▲▼▲▼▲▼        ',
            '                          ▲                          ',
            '                         ▲▼▲                         ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                         ▼▲▼                         ',
            '                          ▼                          ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                          ▲                          ',
            '                         ▲▼▲                         ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                         ▼▲▼                         ',
            '                          ▼                          ',
        ];

        let result = new KochAntiSnowflake().create(3, { step: 2, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 rotation=flip', () => {
        let expected = [
            '▼▲ ▲▼▲     ▲▼▲ ▲▼▲                 ▲▼▲ ▲▼▲     ▲▼▲ ▲▼',
            '  ▲▼▲▼     ▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼     ▼▲▼▲  ',
            '  ▼▲▼ ▼▲ ▲▼▲▼▲▼▲▼▲▼▲             ▲▼▲▼▲▼▲▼▲▼▲ ▲▼ ▼▲▼  ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼             ▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '        ▼▲▼▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲▼▲▼        ',
            '      ▲▼▲▼▲▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼▲▼▲▼▲      ',
            '      ▼▲▼▲▼▲▼▲▼▲▼ ▼▲ ▲▼▲     ▲▼▲ ▲▼ ▼▲▼▲▼▲▼▲▼▲▼      ',
            '        ▲▼▲▼▲▼▲     ▲▼▲▼     ▼▲▼▲     ▲▼▲▼▲▼▲        ',
            '        ▼▲▼ ▼▲▼     ▼▲▼ ▼▲ ▲▼ ▼▲▼     ▼▲▼ ▼▲▼        ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                    ▲▼▲ ▲▼▲▼▲ ▲▼▲                    ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                    ▼▲▼ ▼▲▼▲▼ ▼▲▼                    ',
            '                          ▲                          ',
            '                          ▼                          ',
            '                        ▲▼▲▼▲                        ',
            '                        ▼▲▼▲▼                        ',
            '                          ▲                          ',
            '                          ▼                          ',
        ];

        let result = new KochAntiSnowflake().create(3, { step: 3, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });
});