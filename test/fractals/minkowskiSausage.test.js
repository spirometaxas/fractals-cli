const { MinkowskiSausage } = require('../../src/fractals/minkowskiSausage');
const { Utils } = require('../../src/utils');

describe('MinkowskiSausage Tests', () => {
    test('generate n=0', () => {
        let expected = [
            '───',
        ];

        let result = new MinkowskiSausage().create(0, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1', () => {
        let expected = [
            '  ┌─┐    ',
            '──┘ │ ┌──',
            '    └─┘  ',
        ];

        let result = new MinkowskiSausage().create(1, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2', () => {
        let expected = [
            '          ┌─┐                    ',
            '        ┌─┘ │ ┌─┐                ',
            '        └─┐ └─┘ └─┐              ',
            '      ┌───┘   ┌───┘              ',
            '  ┌─┐ └─┐     └─┐         ┌─┐    ',
            '──┘ │ ┌─┘       │       ┌─┘ │ ┌──',
            '    └─┘         └─┐     └─┐ └─┘  ',
            '              ┌───┘   ┌───┘      ',
            '              └─┐ ┌─┐ └─┐        ',
            '                └─┘ │ ┌─┘        ',
            '                    └─┘          ',
        ];

        let result = new MinkowskiSausage().create(2, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3', () => {
        let expected = [
            '                                          ┌─┐                                                                                    ',
            '                                        ┌─┘ │ ┌─┐                                                                                ',
            '                                        └─┐ └─┘ └─┐                                                                              ',
            '                                      ┌───┘   ┌───┘                                                                              ',
            '                                  ┌─┐ └─┐     └─┐         ┌─┐                                                                    ',
            '                                ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐                                                                ',
            '                                └─┐ └─┘         └─┐     └─┐ └─┘ └─┐                                                              ',
            '                              ┌───┘           ┌───┘   ┌───┘   ┌───┘                                                              ',
            '                              └─┐ ┌─┐         └─┐ ┌─┐ └─┐     └─┐ ┌─┐                                                            ',
            '                                └─┘ │ ┌─┐       └─┘ │ ┌─┘       └─┘ │ ┌─┐                                                        ',
            '                                    └─┘ └─┐         └─┘             └─┘ └─┐                                                      ',
            '                                      ┌───┘                           ┌───┘                                                      ',
            '                          ┌─┐     ┌─┐ └─┐                 ┌─┐     ┌─┐ └─┐                                                        ',
            '                        ┌─┘ │ ┌───┘ │ ┌─┘               ┌─┘ │ ┌───┘ │ ┌─┘                                                        ',
            '                        └─┐ └─┘     └─┘                 └─┐ └─┘     └─┘                                                          ',
            '                      ┌───┘                           ┌───┘                                                                      ',
            '          ┌─┐         └─┐ ┌─┐                         └─┐ ┌─┐                                             ┌─┐                    ',
            '        ┌─┘ │ ┌─┐       └─┘ │ ┌─┐                       └─┘ │ ┌─┐                                       ┌─┘ │ ┌─┐                ',
            '        └─┐ └─┘ └─┐         └─┘ └─┐                         └─┘ └─┐                                     └─┐ └─┘ └─┐              ',
            '      ┌───┘   ┌───┘           ┌───┘                           ┌───┘                                   ┌───┘   ┌───┘              ',
            '  ┌─┐ └─┐     └─┐         ┌─┐ └─┐                             └─┐                                 ┌─┐ └─┐     └─┐         ┌─┐    ',
            '──┘ │ ┌─┘       │       ┌─┘ │ ┌─┘                               │                               ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌──',
            '    └─┘         └─┐     └─┐ └─┘                                 └─┐                             └─┐ └─┘         └─┐     └─┐ └─┘  ',
            '              ┌───┘   ┌───┘                                   ┌───┘                           ┌───┘           ┌───┘   ┌───┘      ',
            '              └─┐ ┌─┐ └─┐                                     └─┐ ┌─┐                         └─┐ ┌─┐         └─┐ ┌─┐ └─┐        ',
            '                └─┘ │ ┌─┘                                       └─┘ │ ┌─┐                       └─┘ │ ┌─┐       └─┘ │ ┌─┘        ',
            '                    └─┘                                             └─┘ └─┐                         └─┘ └─┐         └─┘          ',
            '                                                                      ┌───┘                           ┌───┘                      ',
            '                                                          ┌─┐     ┌─┐ └─┐                 ┌─┐     ┌─┐ └─┐                        ',
            '                                                        ┌─┘ │ ┌───┘ │ ┌─┘               ┌─┘ │ ┌───┘ │ ┌─┘                        ',
            '                                                        └─┐ └─┘     └─┘                 └─┐ └─┘     └─┘                          ',
            '                                                      ┌───┘                           ┌───┘                                      ',
            '                                                      └─┐ ┌─┐             ┌─┐         └─┐ ┌─┐                                    ',
            '                                                        └─┘ │ ┌─┐       ┌─┘ │ ┌─┐       └─┘ │ ┌─┐                                ',
            '                                                            └─┘ └─┐     └─┐ └─┘ └─┐         └─┘ └─┐                              ',
            '                                                              ┌───┘   ┌───┘   ┌───┘           ┌───┘                              ',
            '                                                              └─┐ ┌─┐ └─┐     └─┐         ┌─┐ └─┐                                ',
            '                                                                └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┘                                ',
            '                                                                    └─┘         └─┐     └─┐ └─┘                                  ',
            '                                                                              ┌───┘   ┌───┘                                      ',
            '                                                                              └─┐ ┌─┐ └─┐                                        ',
            '                                                                                └─┘ │ ┌─┘                                        ',
            '                                                                                    └─┘                                          ',
        ];

        let result = new MinkowskiSausage().create(3, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 0 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                ┌───────────────────────────────┐                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '────────────────────────────────┘                               │                               ┌────────────────────────────────',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                └───────────────────────────────┘                                ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 1 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                        ┌───────┐                                                                                ',
            '                                        │       │                                                                                ',
            '                                        │       │                                                                                ',
            '                                        │       │                                                                                ',
            '                                ┌───────┘       │       ┌───────┐                                                                ',
            '                                │               │       │       │                                                                ',
            '                                │               │       │       │                                                                ',
            '                                │               │       │       │                                                                ',
            '                                └───────┐       └───────┘       └───────┐                                                        ',
            '                                        │                               │                                                        ',
            '                                        │                               │                                                        ',
            '                                        │                               │                                                        ',
            '                        ┌───────────────┘               ┌───────────────┘                                                        ',
            '                        │                               │                                                                        ',
            '                        │                               │                                                                        ',
            '                        │                               │                                                                        ',
            '        ┌───────┐       └───────┐                       └───────┐                                       ┌───────┐                ',
            '        │       │               │                               │                                       │       │                ',
            '        │       │               │                               │                                       │       │                ',
            '        │       │               │                               │                                       │       │                ',
            '────────┘       │       ┌───────┘                               │                               ┌───────┘       │       ┌────────',
            '                │       │                                       │                               │               │       │        ',
            '                │       │                                       │                               │               │       │        ',
            '                │       │                                       │                               │               │       │        ',
            '                └───────┘                                       └───────┐                       └───────┐       └───────┘        ',
            '                                                                        │                               │                        ',
            '                                                                        │                               │                        ',
            '                                                                        │                               │                        ',
            '                                                        ┌───────────────┘               ┌───────────────┘                        ',
            '                                                        │                               │                                        ',
            '                                                        │                               │                                        ',
            '                                                        │                               │                                        ',
            '                                                        └───────┐       ┌───────┐       └───────┐                                ',
            '                                                                │       │       │               │                                ',
            '                                                                │       │       │               │                                ',
            '                                                                │       │       │               │                                ',
            '                                                                └───────┘       │       ┌───────┘                                ',
            '                                                                                │       │                                        ',
            '                                                                                │       │                                        ',
            '                                                                                │       │                                        ',
            '                                                                                └───────┘                                        ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 2 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3', () => {
        let expected = [
            '                                          ┌─┐                                                                                    ',
            '                                        ┌─┘ │ ┌─┐                                                                                ',
            '                                        └─┐ └─┘ └─┐                                                                              ',
            '                                      ┌───┘   ┌───┘                                                                              ',
            '                                  ┌─┐ └─┐     └─┐         ┌─┐                                                                    ',
            '                                ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐                                                                ',
            '                                └─┐ └─┘         └─┐     └─┐ └─┘ └─┐                                                              ',
            '                              ┌───┘           ┌───┘   ┌───┘   ┌───┘                                                              ',
            '                              └─┐ ┌─┐         └─┐ ┌─┐ └─┐     └─┐ ┌─┐                                                            ',
            '                                └─┘ │ ┌─┐       └─┘ │ ┌─┘       └─┘ │ ┌─┐                                                        ',
            '                                    └─┘ └─┐         └─┘             └─┘ └─┐                                                      ',
            '                                      ┌───┘                           ┌───┘                                                      ',
            '                          ┌─┐     ┌─┐ └─┐                 ┌─┐     ┌─┐ └─┐                                                        ',
            '                        ┌─┘ │ ┌───┘ │ ┌─┘               ┌─┘ │ ┌───┘ │ ┌─┘                                                        ',
            '                        └─┐ └─┘     └─┘                 └─┐ └─┘     └─┘                                                          ',
            '                      ┌───┘                           ┌───┘                                                                      ',
            '          ┌─┐         └─┐ ┌─┐                         └─┐ ┌─┐                                             ┌─┐                    ',
            '        ┌─┘ │ ┌─┐       └─┘ │ ┌─┐                       └─┘ │ ┌─┐                                       ┌─┘ │ ┌─┐                ',
            '        └─┐ └─┘ └─┐         └─┘ └─┐                         └─┘ └─┐                                     └─┐ └─┘ └─┐              ',
            '      ┌───┘   ┌───┘           ┌───┘                           ┌───┘                                   ┌───┘   ┌───┘              ',
            '  ┌─┐ └─┐     └─┐         ┌─┐ └─┐                             └─┐                                 ┌─┐ └─┐     └─┐         ┌─┐    ',
            '──┘ │ ┌─┘       │       ┌─┘ │ ┌─┘                               │                               ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌──',
            '    └─┘         └─┐     └─┐ └─┘                                 └─┐                             └─┐ └─┘         └─┐     └─┐ └─┘  ',
            '              ┌───┘   ┌───┘                                   ┌───┘                           ┌───┘           ┌───┘   ┌───┘      ',
            '              └─┐ ┌─┐ └─┐                                     └─┐ ┌─┐                         └─┐ ┌─┐         └─┐ ┌─┐ └─┐        ',
            '                └─┘ │ ┌─┘                                       └─┘ │ ┌─┐                       └─┘ │ ┌─┐       └─┘ │ ┌─┘        ',
            '                    └─┘                                             └─┘ └─┐                         └─┘ └─┐         └─┘          ',
            '                                                                      ┌───┘                           ┌───┘                      ',
            '                                                          ┌─┐     ┌─┐ └─┐                 ┌─┐     ┌─┐ └─┐                        ',
            '                                                        ┌─┘ │ ┌───┘ │ ┌─┘               ┌─┘ │ ┌───┘ │ ┌─┘                        ',
            '                                                        └─┐ └─┘     └─┘                 └─┐ └─┘     └─┘                          ',
            '                                                      ┌───┘                           ┌───┘                                      ',
            '                                                      └─┐ ┌─┐             ┌─┐         └─┐ ┌─┐                                    ',
            '                                                        └─┘ │ ┌─┐       ┌─┘ │ ┌─┐       └─┘ │ ┌─┐                                ',
            '                                                            └─┘ └─┐     └─┐ └─┘ └─┐         └─┘ └─┐                              ',
            '                                                              ┌───┘   ┌───┘   ┌───┘           ┌───┘                              ',
            '                                                              └─┐ ┌─┐ └─┐     └─┐         ┌─┐ └─┐                                ',
            '                                                                └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┘                                ',
            '                                                                    └─┘         └─┐     └─┐ └─┘                                  ',
            '                                                                              ┌───┘   ┌───┘                                      ',
            '                                                                              └─┐ ┌─┐ └─┐                                        ',
            '                                                                                └─┘ │ ┌─┘                                        ',
            '                                                                                    └─┘                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 3 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 inverse=true', () => {
        let expected = [
            '───',
        ];

        let result = new MinkowskiSausage().create(0, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 inverse=true', () => {
        let expected = [
            '    ┌─┐  ',
            '──┐ │ └──',
            '  └─┘    ',
        ];

        let result = new MinkowskiSausage().create(1, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 inverse=true', () => {
        let expected = [
            '                    ┌─┐          ',
            '                ┌─┐ │ └─┐        ',
            '              ┌─┘ └─┘ ┌─┘        ',
            '              └───┐   └───┐      ',
            '    ┌─┐         ┌─┘     ┌─┘ ┌─┐  ',
            '──┐ │ └─┐       │       └─┐ │ └──',
            '  └─┘ ┌─┘     ┌─┘         └─┘    ',
            '      └───┐   └───┐              ',
            '        ┌─┘ ┌─┐ ┌─┘              ',
            '        └─┐ │ └─┘                ',
            '          └─┘                    ',
        ];

        let result = new MinkowskiSausage().create(2, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 inverse=true', () => {
        let expected = [
            '                                                                                    ┌─┐                                          ',
            '                                                                                ┌─┐ │ └─┐                                        ',
            '                                                                              ┌─┘ └─┘ ┌─┘                                        ',
            '                                                                              └───┐   └───┐                                      ',
            '                                                                    ┌─┐         ┌─┘     ┌─┘ ┌─┐                                  ',
            '                                                                ┌─┐ │ └─┐       │       └─┐ │ └─┐                                ',
            '                                                              ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘                                ',
            '                                                              └───┐   └───┐   └───┐           └───┐                              ',
            '                                                            ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘                              ',
            '                                                        ┌─┐ │ └─┘       └─┐ │ └─┘       ┌─┐ │ └─┘                                ',
            '                                                      ┌─┘ └─┘             └─┘         ┌─┘ └─┘                                    ',
            '                                                      └───┐                           └───┐                                      ',
            '                                                        ┌─┘ ┌─┐     ┌─┐                 ┌─┘ ┌─┐     ┌─┐                          ',
            '                                                        └─┐ │ └───┐ │ └─┐               └─┐ │ └───┐ │ └─┐                        ',
            '                                                          └─┘     └─┘ ┌─┘                 └─┘     └─┘ ┌─┘                        ',
            '                                                                      └───┐                           └───┐                      ',
            '                    ┌─┐                                             ┌─┐ ┌─┘                         ┌─┐ ┌─┘         ┌─┐          ',
            '                ┌─┐ │ └─┐                                       ┌─┐ │ └─┘                       ┌─┐ │ └─┘       ┌─┐ │ └─┐        ',
            '              ┌─┘ └─┘ ┌─┘                                     ┌─┘ └─┘                         ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘        ',
            '              └───┐   └───┐                                   └───┐                           └───┐           └───┐   └───┐      ',
            '    ┌─┐         ┌─┘     ┌─┘ ┌─┐                                 ┌─┘                             ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐  ',
            '──┐ │ └─┐       │       └─┐ │ └─┐                               │                               └─┐ │ └─┐       │       └─┐ │ └──',
            '  └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘                             ┌─┘                                 └─┘ ┌─┘     ┌─┘         └─┘    ',
            '      └───┐   └───┐           └───┐                           └───┐                                   └───┐   └───┐              ',
            '        ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘                         ┌─┐ ┌─┘                                     ┌─┘ ┌─┐ ┌─┘              ',
            '        └─┐ │ └─┘       ┌─┐ │ └─┘                       ┌─┐ │ └─┘                                       └─┐ │ └─┘                ',
            '          └─┘         ┌─┘ └─┘                         ┌─┘ └─┘                                             └─┘                    ',
            '                      └───┐                           └───┐                                                                      ',
            '                        ┌─┘ ┌─┐     ┌─┐                 ┌─┘ ┌─┐     ┌─┐                                                          ',
            '                        └─┐ │ └───┐ │ └─┐               └─┐ │ └───┐ │ └─┐                                                        ',
            '                          └─┘     └─┘ ┌─┘                 └─┘     └─┘ ┌─┘                                                        ',
            '                                      └───┐                           └───┐                                                      ',
            '                                    ┌─┐ ┌─┘         ┌─┐             ┌─┐ ┌─┘                                                      ',
            '                                ┌─┐ │ └─┘       ┌─┐ │ └─┐       ┌─┐ │ └─┘                                                        ',
            '                              ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘                                                            ',
            '                              └───┐           └───┐   └───┐   └───┐                                                              ',
            '                                ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘                                                              ',
            '                                └─┐ │ └─┐       │       └─┐ │ └─┘                                                                ',
            '                                  └─┘ ┌─┘     ┌─┘         └─┘                                                                    ',
            '                                      └───┐   └───┐                                                                              ',
            '                                        ┌─┘ ┌─┐ ┌─┘                                                                              ',
            '                                        └─┐ │ └─┘                                                                                ',
            '                                          └─┘                                                                                    ',
        ];

        let result = new MinkowskiSausage().create(3, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 inverse=true', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 0, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 inverse=true', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                ┌───────────────────────────────┐                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '                                                                │                               │                                ',
            '────────────────────────────────┐                               │                               └────────────────────────────────',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                │                               │                                                                ',
            '                                └───────────────────────────────┘                                                                ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 1, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 inverse=true', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                ┌───────┐                                        ',
            '                                                                                │       │                                        ',
            '                                                                                │       │                                        ',
            '                                                                                │       │                                        ',
            '                                                                ┌───────┐       │       └───────┐                                ',
            '                                                                │       │       │               │                                ',
            '                                                                │       │       │               │                                ',
            '                                                                │       │       │               │                                ',
            '                                                        ┌───────┘       └───────┘       ┌───────┘                                ',
            '                                                        │                               │                                        ',
            '                                                        │                               │                                        ',
            '                                                        │                               │                                        ',
            '                                                        └───────────────┐               └───────────────┐                        ',
            '                                                                        │                               │                        ',
            '                                                                        │                               │                        ',
            '                                                                        │                               │                        ',
            '                ┌───────┐                                       ┌───────┘                       ┌───────┘       ┌───────┐        ',
            '                │       │                                       │                               │               │       │        ',
            '                │       │                                       │                               │               │       │        ',
            '                │       │                                       │                               │               │       │        ',
            '────────┐       │       └───────┐                               │                               └───────┐       │       └────────',
            '        │       │               │                               │                                       │       │                ',
            '        │       │               │                               │                                       │       │                ',
            '        │       │               │                               │                                       │       │                ',
            '        └───────┘       ┌───────┘                       ┌───────┘                                       └───────┘                ',
            '                        │                               │                                                                        ',
            '                        │                               │                                                                        ',
            '                        │                               │                                                                        ',
            '                        └───────────────┐               └───────────────┐                                                        ',
            '                                        │                               │                                                        ',
            '                                        │                               │                                                        ',
            '                                        │                               │                                                        ',
            '                                ┌───────┘       ┌───────┐       ┌───────┘                                                        ',
            '                                │               │       │       │                                                                ',
            '                                │               │       │       │                                                                ',
            '                                │               │       │       │                                                                ',
            '                                └───────┐       │       └───────┘                                                                ',
            '                                        │       │                                                                                ',
            '                                        │       │                                                                                ',
            '                                        │       │                                                                                ',
            '                                        └───────┘                                                                                ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 2, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 inverse=true', () => {
        let expected = [
            '                                                                                    ┌─┐                                          ',
            '                                                                                ┌─┐ │ └─┐                                        ',
            '                                                                              ┌─┘ └─┘ ┌─┘                                        ',
            '                                                                              └───┐   └───┐                                      ',
            '                                                                    ┌─┐         ┌─┘     ┌─┘ ┌─┐                                  ',
            '                                                                ┌─┐ │ └─┐       │       └─┐ │ └─┐                                ',
            '                                                              ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘                                ',
            '                                                              └───┐   └───┐   └───┐           └───┐                              ',
            '                                                            ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘                              ',
            '                                                        ┌─┐ │ └─┘       └─┐ │ └─┘       ┌─┐ │ └─┘                                ',
            '                                                      ┌─┘ └─┘             └─┘         ┌─┘ └─┘                                    ',
            '                                                      └───┐                           └───┐                                      ',
            '                                                        ┌─┘ ┌─┐     ┌─┐                 ┌─┘ ┌─┐     ┌─┐                          ',
            '                                                        └─┐ │ └───┐ │ └─┐               └─┐ │ └───┐ │ └─┐                        ',
            '                                                          └─┘     └─┘ ┌─┘                 └─┘     └─┘ ┌─┘                        ',
            '                                                                      └───┐                           └───┐                      ',
            '                    ┌─┐                                             ┌─┐ ┌─┘                         ┌─┐ ┌─┘         ┌─┐          ',
            '                ┌─┐ │ └─┐                                       ┌─┐ │ └─┘                       ┌─┐ │ └─┘       ┌─┐ │ └─┐        ',
            '              ┌─┘ └─┘ ┌─┘                                     ┌─┘ └─┘                         ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘        ',
            '              └───┐   └───┐                                   └───┐                           └───┐           └───┐   └───┐      ',
            '    ┌─┐         ┌─┘     ┌─┘ ┌─┐                                 ┌─┘                             ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐  ',
            '──┐ │ └─┐       │       └─┐ │ └─┐                               │                               └─┐ │ └─┐       │       └─┐ │ └──',
            '  └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘                             ┌─┘                                 └─┘ ┌─┘     ┌─┘         └─┘    ',
            '      └───┐   └───┐           └───┐                           └───┐                                   └───┐   └───┐              ',
            '        ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘                         ┌─┐ ┌─┘                                     ┌─┘ ┌─┐ ┌─┘              ',
            '        └─┐ │ └─┘       ┌─┐ │ └─┘                       ┌─┐ │ └─┘                                       └─┐ │ └─┘                ',
            '          └─┘         ┌─┘ └─┘                         ┌─┘ └─┘                                             └─┘                    ',
            '                      └───┐                           └───┐                                                                      ',
            '                        ┌─┘ ┌─┐     ┌─┐                 ┌─┘ ┌─┐     ┌─┐                                                          ',
            '                        └─┐ │ └───┐ │ └─┐               └─┐ │ └───┐ │ └─┐                                                        ',
            '                          └─┘     └─┘ ┌─┘                 └─┘     └─┘ ┌─┘                                                        ',
            '                                      └───┐                           └───┐                                                      ',
            '                                    ┌─┐ ┌─┘         ┌─┐             ┌─┐ ┌─┘                                                      ',
            '                                ┌─┐ │ └─┘       ┌─┐ │ └─┐       ┌─┐ │ └─┘                                                        ',
            '                              ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘                                                            ',
            '                              └───┐           └───┐   └───┐   └───┐                                                              ',
            '                                ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘                                                              ',
            '                                └─┐ │ └─┐       │       └─┐ │ └─┘                                                                ',
            '                                  └─┘ ┌─┘     ┌─┘         └─┘                                                                    ',
            '                                      └───┐   └───┐                                                                              ',
            '                                        ┌─┘ ┌─┐ ┌─┘                                                                              ',
            '                                        └─┐ │ └─┘                                                                                ',
            '                                          └─┘                                                                                    ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 3, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 rotation=left', () => {
        let expected = [
            '│',
            '│',
        ];

        let result = new MinkowskiSausage().create(0, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 rotation=left', () => {
        let expected = [
            '  │  ',
            '  └─┐',
            '┌───┘',
            '└─┐  ',
            '  │  ',
        ];

        let result = new MinkowskiSausage().create(1, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 rotation=left', () => {
        let expected = [
            '          │          ',
            '          └─┐        ',
            '        ┌───┘        ',
            '        └─┐ ┌─┐      ',
            '          └─┘ │ ┌─┐  ',
            '              └─┘ └─┐',
            '                ┌───┘',
            '    ┌─┐     ┌─┐ └─┐  ',
            '  ┌─┘ │ ┌───┘ │ ┌─┘  ',
            '  └─┐ └─┘     └─┘    ',
            '┌───┘                ',
            '└─┐ ┌─┐              ',
            '  └─┘ │ ┌─┐          ',
            '      └─┘ └─┐        ',
            '        ┌───┘        ',
            '        └─┐          ',
            '          │          ',
        ];

        let result = new MinkowskiSausage().create(2, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                          └─┐                                        ',
            '                                        ┌───┘                                        ',
            '                                        └─┐ ┌─┐                                      ',
            '                                          └─┘ │ ┌─┐                                  ',
            '                                              └─┘ └─┐                                ',
            '                                                ┌───┘                                ',
            '                                    ┌─┐     ┌─┐ └─┐                                  ',
            '                                  ┌─┘ │ ┌───┘ │ ┌─┘                                  ',
            '                                  └─┐ └─┘     └─┘                                    ',
            '                                ┌───┘                                                ',
            '                                └─┐ ┌─┐             ┌─┐                              ',
            '                                  └─┘ │ ┌─┐       ┌─┘ │ ┌─┐                          ',
            '                                      └─┘ └─┐     └─┐ └─┘ └─┐                        ',
            '                                        ┌───┘   ┌───┘   ┌───┘                        ',
            '                                        └─┐ ┌─┐ └─┐     └─┐         ┌─┐              ',
            '                                          └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐          ',
            '                                              └─┘         └─┐     └─┐ └─┘ └─┐        ',
            '                                                        ┌───┘   ┌───┘   ┌───┘        ',
            '                                                        └─┐ ┌─┐ └─┐     └─┐ ┌─┐      ',
            '                                                          └─┘ │ ┌─┘       └─┘ │ ┌─┐  ',
            '                                                              └─┘             └─┘ └─┐',
            '                                                                                ┌───┘',
            '                                                                    ┌─┐     ┌─┐ └─┐  ',
            '                                                                  ┌─┘ │ ┌───┘ │ ┌─┘  ',
            '                                                                  └─┐ └─┘     └─┘    ',
            '                                                                ┌───┘                ',
            '                    ┌─┐                             ┌─┐         └─┐ ┌─┐              ',
            '                  ┌─┘ │ ┌─┐                       ┌─┘ │ ┌─┐       └─┘ │ ┌─┐          ',
            '                  └─┐ └─┘ └─┐                     └─┐ └─┘ └─┐         └─┘ └─┐        ',
            '                ┌───┘   ┌───┘                   ┌───┘   ┌───┘           ┌───┘        ',
            '            ┌─┐ └─┐     └─┐         ┌─┐     ┌─┐ └─┐     └─┐         ┌─┐ └─┐          ',
            '          ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌───┘ │ ┌─┘       │       ┌─┘ │ ┌─┘          ',
            '          └─┐ └─┘         └─┐     └─┐ └─┘     └─┘         └─┐     └─┐ └─┘            ',
            '        ┌───┘           ┌───┘   ┌───┘                   ┌───┘   ┌───┘                ',
            '        └─┐ ┌─┐         └─┐ ┌─┐ └─┐                     └─┐ ┌─┐ └─┐                  ',
            '          └─┘ │ ┌─┐       └─┘ │ ┌─┘                       └─┘ │ ┌─┘                  ',
            '              └─┘ └─┐         └─┘                             └─┘                    ',
            '                ┌───┘                                                                ',
            '    ┌─┐     ┌─┐ └─┐                                                                  ',
            '  ┌─┘ │ ┌───┘ │ ┌─┘                                                                  ',
            '  └─┐ └─┘     └─┘                                                                    ',
            '┌───┘                                                                                ',
            '└─┐ ┌─┐             ┌─┐                                                              ',
            '  └─┘ │ ┌─┐       ┌─┘ │ ┌─┐                                                          ',
            '      └─┘ └─┐     └─┐ └─┘ └─┐                                                        ',
            '        ┌───┘   ┌───┘   ┌───┘                                                        ',
            '        └─┐ ┌─┐ └─┐     └─┐         ┌─┐                                              ',
            '          └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐                                          ',
            '              └─┘         └─┐     └─┐ └─┘ └─┐                                        ',
            '                        ┌───┘   ┌───┘   ┌───┘                                        ',
            '                        └─┐ ┌─┐ └─┐     └─┐ ┌─┐                                      ',
            '                          └─┘ │ ┌─┘       └─┘ │ ┌─┐                                  ',
            '                              └─┘             └─┘ └─┐                                ',
            '                                                ┌───┘                                ',
            '                                    ┌─┐     ┌─┐ └─┐                                  ',
            '                                  ┌─┘ │ ┌───┘ │ ┌─┘                                  ',
            '                                  └─┐ └─┘     └─┘                                    ',
            '                                ┌───┘                                                ',
            '                                └─┐ ┌─┐                                              ',
            '                                  └─┘ │ ┌─┐                                          ',
            '                                      └─┘ └─┐                                        ',
            '                                        ┌───┘                                        ',
            '                                        └─┐                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 0, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          └───────────────────────────────┐          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '          ┌───────────────────────────────────────────────────────────────┘          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          └───────────────────────────────┐                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 1, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          └───────┐                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                  ┌───────────────┘                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  └───────┐       ┌───────┐                          ',
            '                                          │       │       │                          ',
            '                                          │       │       │                          ',
            '                                          │       │       │                          ',
            '                                          └───────┘       │       ┌───────┐          ',
            '                                                          │       │       │          ',
            '                                                          │       │       │          ',
            '                                                          │       │       │          ',
            '                                                          └───────┘       └───────┐  ',
            '                                                                                  │  ',
            '                                                                                  │  ',
            '                                                                                  │  ',
            '                                                                  ┌───────────────┘  ',
            '                                                                  │                  ',
            '                                                                  │                  ',
            '                                                                  │                  ',
            '                  ┌───────┐                       ┌───────┐       └───────┐          ',
            '                  │       │                       │       │               │          ',
            '                  │       │                       │       │               │          ',
            '                  │       │                       │       │               │          ',
            '          ┌───────┘       │       ┌───────────────┘       │       ┌───────┘          ',
            '          │               │       │                       │       │                  ',
            '          │               │       │                       │       │                  ',
            '          │               │       │                       │       │                  ',
            '          └───────┐       └───────┘                       └───────┘                  ',
            '                  │                                                                  ',
            '                  │                                                                  ',
            '                  │                                                                  ',
            '  ┌───────────────┘                                                                  ',
            '  │                                                                                  ',
            '  │                                                                                  ',
            '  │                                                                                  ',
            '  └───────┐       ┌───────┐                                                          ',
            '          │       │       │                                                          ',
            '          │       │       │                                                          ',
            '          │       │       │                                                          ',
            '          └───────┘       │       ┌───────┐                                          ',
            '                          │       │       │                                          ',
            '                          │       │       │                                          ',
            '                          │       │       │                                          ',
            '                          └───────┘       └───────┐                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                  ┌───────────────┘                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  └───────┐                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 2, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                          └─┐                                        ',
            '                                        ┌───┘                                        ',
            '                                        └─┐ ┌─┐                                      ',
            '                                          └─┘ │ ┌─┐                                  ',
            '                                              └─┘ └─┐                                ',
            '                                                ┌───┘                                ',
            '                                    ┌─┐     ┌─┐ └─┐                                  ',
            '                                  ┌─┘ │ ┌───┘ │ ┌─┘                                  ',
            '                                  └─┐ └─┘     └─┘                                    ',
            '                                ┌───┘                                                ',
            '                                └─┐ ┌─┐             ┌─┐                              ',
            '                                  └─┘ │ ┌─┐       ┌─┘ │ ┌─┐                          ',
            '                                      └─┘ └─┐     └─┐ └─┘ └─┐                        ',
            '                                        ┌───┘   ┌───┘   ┌───┘                        ',
            '                                        └─┐ ┌─┐ └─┐     └─┐         ┌─┐              ',
            '                                          └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐          ',
            '                                              └─┘         └─┐     └─┐ └─┘ └─┐        ',
            '                                                        ┌───┘   ┌───┘   ┌───┘        ',
            '                                                        └─┐ ┌─┐ └─┐     └─┐ ┌─┐      ',
            '                                                          └─┘ │ ┌─┘       └─┘ │ ┌─┐  ',
            '                                                              └─┘             └─┘ └─┐',
            '                                                                                ┌───┘',
            '                                                                    ┌─┐     ┌─┐ └─┐  ',
            '                                                                  ┌─┘ │ ┌───┘ │ ┌─┘  ',
            '                                                                  └─┐ └─┘     └─┘    ',
            '                                                                ┌───┘                ',
            '                    ┌─┐                             ┌─┐         └─┐ ┌─┐              ',
            '                  ┌─┘ │ ┌─┐                       ┌─┘ │ ┌─┐       └─┘ │ ┌─┐          ',
            '                  └─┐ └─┘ └─┐                     └─┐ └─┘ └─┐         └─┘ └─┐        ',
            '                ┌───┘   ┌───┘                   ┌───┘   ┌───┘           ┌───┘        ',
            '            ┌─┐ └─┐     └─┐         ┌─┐     ┌─┐ └─┐     └─┐         ┌─┐ └─┐          ',
            '          ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌───┘ │ ┌─┘       │       ┌─┘ │ ┌─┘          ',
            '          └─┐ └─┘         └─┐     └─┐ └─┘     └─┘         └─┐     └─┐ └─┘            ',
            '        ┌───┘           ┌───┘   ┌───┘                   ┌───┘   ┌───┘                ',
            '        └─┐ ┌─┐         └─┐ ┌─┐ └─┐                     └─┐ ┌─┐ └─┐                  ',
            '          └─┘ │ ┌─┐       └─┘ │ ┌─┘                       └─┘ │ ┌─┘                  ',
            '              └─┘ └─┐         └─┘                             └─┘                    ',
            '                ┌───┘                                                                ',
            '    ┌─┐     ┌─┐ └─┐                                                                  ',
            '  ┌─┘ │ ┌───┘ │ ┌─┘                                                                  ',
            '  └─┐ └─┘     └─┘                                                                    ',
            '┌───┘                                                                                ',
            '└─┐ ┌─┐             ┌─┐                                                              ',
            '  └─┘ │ ┌─┐       ┌─┘ │ ┌─┐                                                          ',
            '      └─┘ └─┐     └─┐ └─┘ └─┐                                                        ',
            '        ┌───┘   ┌───┘   ┌───┘                                                        ',
            '        └─┐ ┌─┐ └─┐     └─┐         ┌─┐                                              ',
            '          └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐                                          ',
            '              └─┘         └─┐     └─┐ └─┘ └─┐                                        ',
            '                        ┌───┘   ┌───┘   ┌───┘                                        ',
            '                        └─┐ ┌─┐ └─┐     └─┐ ┌─┐                                      ',
            '                          └─┘ │ ┌─┘       └─┘ │ ┌─┐                                  ',
            '                              └─┘             └─┘ └─┐                                ',
            '                                                ┌───┘                                ',
            '                                    ┌─┐     ┌─┐ └─┐                                  ',
            '                                  ┌─┘ │ ┌───┘ │ ┌─┘                                  ',
            '                                  └─┐ └─┘     └─┘                                    ',
            '                                ┌───┘                                                ',
            '                                └─┐ ┌─┐                                              ',
            '                                  └─┘ │ ┌─┐                                          ',
            '                                      └─┘ └─┐                                        ',
            '                                        ┌───┘                                        ',
            '                                        └─┐                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 3, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 inverse=true rotation=left', () => {
        let expected = [
            '│',
            '│',
        ];

        let result = new MinkowskiSausage().create(0, { inverse: true, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 inverse=true rotation=left', () => {
        let expected = [
            '  │  ',
            '┌─┘  ',
            '└───┐',
            '  ┌─┘',
            '  │  ',
        ];

        let result = new MinkowskiSausage().create(1, { inverse: true, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 inverse=true rotation=left', () => {
        let expected = [
            '          │          ',
            '        ┌─┘          ',
            '        └───┐        ',
            '      ┌─┐ ┌─┘        ',
            '  ┌─┐ │ └─┘          ',
            '┌─┘ └─┘              ',
            '└───┐                ',
            '  ┌─┘ ┌─┐     ┌─┐    ',
            '  └─┐ │ └───┐ │ └─┐  ',
            '    └─┘     └─┘ ┌─┘  ',
            '                └───┐',
            '              ┌─┐ ┌─┘',
            '          ┌─┐ │ └─┘  ',
            '        ┌─┘ └─┘      ',
            '        └───┐        ',
            '          ┌─┘        ',
            '          │          ',
        ];

        let result = new MinkowskiSausage().create(2, { inverse: true, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 inverse=true rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                        ┌─┘                                          ',
            '                                        └───┐                                        ',
            '                                      ┌─┐ ┌─┘                                        ',
            '                                  ┌─┐ │ └─┘                                          ',
            '                                ┌─┘ └─┘                                              ',
            '                                └───┐                                                ',
            '                                  ┌─┘ ┌─┐     ┌─┐                                    ',
            '                                  └─┐ │ └───┐ │ └─┐                                  ',
            '                                    └─┘     └─┘ ┌─┘                                  ',
            '                                                └───┐                                ',
            '                              ┌─┐             ┌─┐ ┌─┘                                ',
            '                          ┌─┐ │ └─┐       ┌─┐ │ └─┘                                  ',
            '                        ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘                                      ',
            '                        └───┐   └───┐   └───┐                                        ',
            '              ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘                                        ',
            '          ┌─┐ │ └─┐       │       └─┐ │ └─┘                                          ',
            '        ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘                                              ',
            '        └───┐   └───┐   └───┐                                                        ',
            '      ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘                                                        ',
            '  ┌─┐ │ └─┘       └─┐ │ └─┘                                                          ',
            '┌─┘ └─┘             └─┘                                                              ',
            '└───┐                                                                                ',
            '  ┌─┘ ┌─┐     ┌─┐                                                                    ',
            '  └─┐ │ └───┐ │ └─┐                                                                  ',
            '    └─┘     └─┘ ┌─┘                                                                  ',
            '                └───┐                                                                ',
            '              ┌─┐ ┌─┘         ┌─┐                             ┌─┐                    ',
            '          ┌─┐ │ └─┘       ┌─┐ │ └─┐                       ┌─┐ │ └─┐                  ',
            '        ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘                     ┌─┘ └─┘ ┌─┘                  ',
            '        └───┐           └───┐   └───┐                   └───┐   └───┐                ',
            '          ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐     ┌─┐         ┌─┘     ┌─┘ ┌─┐            ',
            '          └─┐ │ └─┐       │       └─┐ │ └───┐ │ └─┐       │       └─┐ │ └─┐          ',
            '            └─┘ ┌─┘     ┌─┘         └─┘     └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘          ',
            '                └───┐   └───┐                   └───┐   └───┐           └───┐        ',
            '                  ┌─┘ ┌─┐ ┌─┘                     ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘        ',
            '                  └─┐ │ └─┘                       └─┐ │ └─┘       ┌─┐ │ └─┘          ',
            '                    └─┘                             └─┘         ┌─┘ └─┘              ',
            '                                                                └───┐                ',
            '                                                                  ┌─┘ ┌─┐     ┌─┐    ',
            '                                                                  └─┐ │ └───┐ │ └─┐  ',
            '                                                                    └─┘     └─┘ ┌─┘  ',
            '                                                                                └───┐',
            '                                                              ┌─┐             ┌─┐ ┌─┘',
            '                                                          ┌─┐ │ └─┐       ┌─┐ │ └─┘  ',
            '                                                        ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘      ',
            '                                                        └───┐   └───┐   └───┐        ',
            '                                              ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘        ',
            '                                          ┌─┐ │ └─┐       │       └─┐ │ └─┘          ',
            '                                        ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘              ',
            '                                        └───┐   └───┐   └───┐                        ',
            '                                      ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘                        ',
            '                                  ┌─┐ │ └─┘       └─┐ │ └─┘                          ',
            '                                ┌─┘ └─┘             └─┘                              ',
            '                                └───┐                                                ',
            '                                  ┌─┘ ┌─┐     ┌─┐                                    ',
            '                                  └─┐ │ └───┐ │ └─┐                                  ',
            '                                    └─┘     └─┘ ┌─┘                                  ',
            '                                                └───┐                                ',
            '                                              ┌─┐ ┌─┘                                ',
            '                                          ┌─┐ │ └─┘                                  ',
            '                                        ┌─┘ └─┘                                      ',
            '                                        └───┐                                        ',
            '                                          ┌─┘                                        ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { inverse: true, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 inverse=true rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 0, inverse: true, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 inverse=true rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '          ┌───────────────────────────────┘                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          └───────────────────────────────────────────────────────────────┐          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                          ┌───────────────────────────────┘          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 1, inverse: true, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 inverse=true rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                  ┌───────┘                                          ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  └───────────────┐                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                          ┌───────┐       ┌───────┘                                  ',
            '                          │       │       │                                          ',
            '                          │       │       │                                          ',
            '                          │       │       │                                          ',
            '          ┌───────┐       │       └───────┘                                          ',
            '          │       │       │                                                          ',
            '          │       │       │                                                          ',
            '          │       │       │                                                          ',
            '  ┌───────┘       └───────┘                                                          ',
            '  │                                                                                  ',
            '  │                                                                                  ',
            '  │                                                                                  ',
            '  └───────────────┐                                                                  ',
            '                  │                                                                  ',
            '                  │                                                                  ',
            '                  │                                                                  ',
            '          ┌───────┘       ┌───────┐                       ┌───────┐                  ',
            '          │               │       │                       │       │                  ',
            '          │               │       │                       │       │                  ',
            '          │               │       │                       │       │                  ',
            '          └───────┐       │       └───────────────┐       │       └───────┐          ',
            '                  │       │                       │       │               │          ',
            '                  │       │                       │       │               │          ',
            '                  │       │                       │       │               │          ',
            '                  └───────┘                       └───────┘       ┌───────┘          ',
            '                                                                  │                  ',
            '                                                                  │                  ',
            '                                                                  │                  ',
            '                                                                  └───────────────┐  ',
            '                                                                                  │  ',
            '                                                                                  │  ',
            '                                                                                  │  ',
            '                                                          ┌───────┐       ┌───────┘  ',
            '                                                          │       │       │          ',
            '                                                          │       │       │          ',
            '                                                          │       │       │          ',
            '                                          ┌───────┐       │       └───────┘          ',
            '                                          │       │       │                          ',
            '                                          │       │       │                          ',
            '                                          │       │       │                          ',
            '                                  ┌───────┘       └───────┘                          ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  └───────────────┐                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                          ┌───────┘                                  ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 2, inverse: true, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 inverse=true rotation=left', () => {
        let expected = [
            '                                          │                                          ',
            '                                        ┌─┘                                          ',
            '                                        └───┐                                        ',
            '                                      ┌─┐ ┌─┘                                        ',
            '                                  ┌─┐ │ └─┘                                          ',
            '                                ┌─┘ └─┘                                              ',
            '                                └───┐                                                ',
            '                                  ┌─┘ ┌─┐     ┌─┐                                    ',
            '                                  └─┐ │ └───┐ │ └─┐                                  ',
            '                                    └─┘     └─┘ ┌─┘                                  ',
            '                                                └───┐                                ',
            '                              ┌─┐             ┌─┐ ┌─┘                                ',
            '                          ┌─┐ │ └─┐       ┌─┐ │ └─┘                                  ',
            '                        ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘                                      ',
            '                        └───┐   └───┐   └───┐                                        ',
            '              ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘                                        ',
            '          ┌─┐ │ └─┐       │       └─┐ │ └─┘                                          ',
            '        ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘                                              ',
            '        └───┐   └───┐   └───┐                                                        ',
            '      ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘                                                        ',
            '  ┌─┐ │ └─┘       └─┐ │ └─┘                                                          ',
            '┌─┘ └─┘             └─┘                                                              ',
            '└───┐                                                                                ',
            '  ┌─┘ ┌─┐     ┌─┐                                                                    ',
            '  └─┐ │ └───┐ │ └─┐                                                                  ',
            '    └─┘     └─┘ ┌─┘                                                                  ',
            '                └───┐                                                                ',
            '              ┌─┐ ┌─┘         ┌─┐                             ┌─┐                    ',
            '          ┌─┐ │ └─┘       ┌─┐ │ └─┐                       ┌─┐ │ └─┐                  ',
            '        ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘                     ┌─┘ └─┘ ┌─┘                  ',
            '        └───┐           └───┐   └───┐                   └───┐   └───┐                ',
            '          ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐     ┌─┐         ┌─┘     ┌─┘ ┌─┐            ',
            '          └─┐ │ └─┐       │       └─┐ │ └───┐ │ └─┐       │       └─┐ │ └─┐          ',
            '            └─┘ ┌─┘     ┌─┘         └─┘     └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘          ',
            '                └───┐   └───┐                   └───┐   └───┐           └───┐        ',
            '                  ┌─┘ ┌─┐ ┌─┘                     ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘        ',
            '                  └─┐ │ └─┘                       └─┐ │ └─┘       ┌─┐ │ └─┘          ',
            '                    └─┘                             └─┘         ┌─┘ └─┘              ',
            '                                                                └───┐                ',
            '                                                                  ┌─┘ ┌─┐     ┌─┐    ',
            '                                                                  └─┐ │ └───┐ │ └─┐  ',
            '                                                                    └─┘     └─┘ ┌─┘  ',
            '                                                                                └───┐',
            '                                                              ┌─┐             ┌─┐ ┌─┘',
            '                                                          ┌─┐ │ └─┐       ┌─┐ │ └─┘  ',
            '                                                        ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘      ',
            '                                                        └───┐   └───┐   └───┐        ',
            '                                              ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘        ',
            '                                          ┌─┐ │ └─┐       │       └─┐ │ └─┘          ',
            '                                        ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘              ',
            '                                        └───┐   └───┐   └───┐                        ',
            '                                      ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘                        ',
            '                                  ┌─┐ │ └─┘       └─┐ │ └─┘                          ',
            '                                ┌─┘ └─┘             └─┘                              ',
            '                                └───┐                                                ',
            '                                  ┌─┘ ┌─┐     ┌─┐                                    ',
            '                                  └─┐ │ └───┐ │ └─┐                                  ',
            '                                    └─┘     └─┘ ┌─┘                                  ',
            '                                                └───┐                                ',
            '                                              ┌─┐ ┌─┘                                ',
            '                                          ┌─┐ │ └─┘                                  ',
            '                                        ┌─┘ └─┘                                      ',
            '                                        └───┐                                        ',
            '                                          ┌─┘                                        ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 3, inverse: true, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 rotation=right', () => {
        let expected = [
            '│',
            '│',
        ];

        let result = new MinkowskiSausage().create(0, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 rotation=right', () => {
        let expected = [
            '  │  ',
            '  └─┐',
            '┌───┘',
            '└─┐  ',
            '  │  ',
        ];

        let result = new MinkowskiSausage().create(1, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 rotation=right', () => {
        let expected = [
            '          │          ',
            '          └─┐        ',
            '        ┌───┘        ',
            '        └─┐ ┌─┐      ',
            '          └─┘ │ ┌─┐  ',
            '              └─┘ └─┐',
            '                ┌───┘',
            '    ┌─┐     ┌─┐ └─┐  ',
            '  ┌─┘ │ ┌───┘ │ ┌─┘  ',
            '  └─┐ └─┘     └─┘    ',
            '┌───┘                ',
            '└─┐ ┌─┐              ',
            '  └─┘ │ ┌─┐          ',
            '      └─┘ └─┐        ',
            '        ┌───┘        ',
            '        └─┐          ',
            '          │          ',
        ];

        let result = new MinkowskiSausage().create(2, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                          └─┐                                        ',
            '                                        ┌───┘                                        ',
            '                                        └─┐ ┌─┐                                      ',
            '                                          └─┘ │ ┌─┐                                  ',
            '                                              └─┘ └─┐                                ',
            '                                                ┌───┘                                ',
            '                                    ┌─┐     ┌─┐ └─┐                                  ',
            '                                  ┌─┘ │ ┌───┘ │ ┌─┘                                  ',
            '                                  └─┐ └─┘     └─┘                                    ',
            '                                ┌───┘                                                ',
            '                                └─┐ ┌─┐             ┌─┐                              ',
            '                                  └─┘ │ ┌─┐       ┌─┘ │ ┌─┐                          ',
            '                                      └─┘ └─┐     └─┐ └─┘ └─┐                        ',
            '                                        ┌───┘   ┌───┘   ┌───┘                        ',
            '                                        └─┐ ┌─┐ └─┐     └─┐         ┌─┐              ',
            '                                          └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐          ',
            '                                              └─┘         └─┐     └─┐ └─┘ └─┐        ',
            '                                                        ┌───┘   ┌───┘   ┌───┘        ',
            '                                                        └─┐ ┌─┐ └─┐     └─┐ ┌─┐      ',
            '                                                          └─┘ │ ┌─┘       └─┘ │ ┌─┐  ',
            '                                                              └─┘             └─┘ └─┐',
            '                                                                                ┌───┘',
            '                                                                    ┌─┐     ┌─┐ └─┐  ',
            '                                                                  ┌─┘ │ ┌───┘ │ ┌─┘  ',
            '                                                                  └─┐ └─┘     └─┘    ',
            '                                                                ┌───┘                ',
            '                    ┌─┐                             ┌─┐         └─┐ ┌─┐              ',
            '                  ┌─┘ │ ┌─┐                       ┌─┘ │ ┌─┐       └─┘ │ ┌─┐          ',
            '                  └─┐ └─┘ └─┐                     └─┐ └─┘ └─┐         └─┘ └─┐        ',
            '                ┌───┘   ┌───┘                   ┌───┘   ┌───┘           ┌───┘        ',
            '            ┌─┐ └─┐     └─┐         ┌─┐     ┌─┐ └─┐     └─┐         ┌─┐ └─┐          ',
            '          ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌───┘ │ ┌─┘       │       ┌─┘ │ ┌─┘          ',
            '          └─┐ └─┘         └─┐     └─┐ └─┘     └─┘         └─┐     └─┐ └─┘            ',
            '        ┌───┘           ┌───┘   ┌───┘                   ┌───┘   ┌───┘                ',
            '        └─┐ ┌─┐         └─┐ ┌─┐ └─┐                     └─┐ ┌─┐ └─┐                  ',
            '          └─┘ │ ┌─┐       └─┘ │ ┌─┘                       └─┘ │ ┌─┘                  ',
            '              └─┘ └─┐         └─┘                             └─┘                    ',
            '                ┌───┘                                                                ',
            '    ┌─┐     ┌─┐ └─┐                                                                  ',
            '  ┌─┘ │ ┌───┘ │ ┌─┘                                                                  ',
            '  └─┐ └─┘     └─┘                                                                    ',
            '┌───┘                                                                                ',
            '└─┐ ┌─┐             ┌─┐                                                              ',
            '  └─┘ │ ┌─┐       ┌─┘ │ ┌─┐                                                          ',
            '      └─┘ └─┐     └─┐ └─┘ └─┐                                                        ',
            '        ┌───┘   ┌───┘   ┌───┘                                                        ',
            '        └─┐ ┌─┐ └─┐     └─┐         ┌─┐                                              ',
            '          └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐                                          ',
            '              └─┘         └─┐     └─┐ └─┘ └─┐                                        ',
            '                        ┌───┘   ┌───┘   ┌───┘                                        ',
            '                        └─┐ ┌─┐ └─┐     └─┐ ┌─┐                                      ',
            '                          └─┘ │ ┌─┘       └─┘ │ ┌─┐                                  ',
            '                              └─┘             └─┘ └─┐                                ',
            '                                                ┌───┘                                ',
            '                                    ┌─┐     ┌─┐ └─┐                                  ',
            '                                  ┌─┘ │ ┌───┘ │ ┌─┘                                  ',
            '                                  └─┐ └─┘     └─┘                                    ',
            '                                ┌───┘                                                ',
            '                                └─┐ ┌─┐                                              ',
            '                                  └─┘ │ ┌─┐                                          ',
            '                                      └─┘ └─┐                                        ',
            '                                        ┌───┘                                        ',
            '                                        └─┐                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 0, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          └───────────────────────────────┐          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '          ┌───────────────────────────────────────────────────────────────┘          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          └───────────────────────────────┐                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 1, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          └───────┐                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                  ┌───────────────┘                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  └───────┐       ┌───────┐                          ',
            '                                          │       │       │                          ',
            '                                          │       │       │                          ',
            '                                          │       │       │                          ',
            '                                          └───────┘       │       ┌───────┐          ',
            '                                                          │       │       │          ',
            '                                                          │       │       │          ',
            '                                                          │       │       │          ',
            '                                                          └───────┘       └───────┐  ',
            '                                                                                  │  ',
            '                                                                                  │  ',
            '                                                                                  │  ',
            '                                                                  ┌───────────────┘  ',
            '                                                                  │                  ',
            '                                                                  │                  ',
            '                                                                  │                  ',
            '                  ┌───────┐                       ┌───────┐       └───────┐          ',
            '                  │       │                       │       │               │          ',
            '                  │       │                       │       │               │          ',
            '                  │       │                       │       │               │          ',
            '          ┌───────┘       │       ┌───────────────┘       │       ┌───────┘          ',
            '          │               │       │                       │       │                  ',
            '          │               │       │                       │       │                  ',
            '          │               │       │                       │       │                  ',
            '          └───────┐       └───────┘                       └───────┘                  ',
            '                  │                                                                  ',
            '                  │                                                                  ',
            '                  │                                                                  ',
            '  ┌───────────────┘                                                                  ',
            '  │                                                                                  ',
            '  │                                                                                  ',
            '  │                                                                                  ',
            '  └───────┐       ┌───────┐                                                          ',
            '          │       │       │                                                          ',
            '          │       │       │                                                          ',
            '          │       │       │                                                          ',
            '          └───────┘       │       ┌───────┐                                          ',
            '                          │       │       │                                          ',
            '                          │       │       │                                          ',
            '                          │       │       │                                          ',
            '                          └───────┘       └───────┐                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                  ┌───────────────┘                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  └───────┐                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 2, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                          └─┐                                        ',
            '                                        ┌───┘                                        ',
            '                                        └─┐ ┌─┐                                      ',
            '                                          └─┘ │ ┌─┐                                  ',
            '                                              └─┘ └─┐                                ',
            '                                                ┌───┘                                ',
            '                                    ┌─┐     ┌─┐ └─┐                                  ',
            '                                  ┌─┘ │ ┌───┘ │ ┌─┘                                  ',
            '                                  └─┐ └─┘     └─┘                                    ',
            '                                ┌───┘                                                ',
            '                                └─┐ ┌─┐             ┌─┐                              ',
            '                                  └─┘ │ ┌─┐       ┌─┘ │ ┌─┐                          ',
            '                                      └─┘ └─┐     └─┐ └─┘ └─┐                        ',
            '                                        ┌───┘   ┌───┘   ┌───┘                        ',
            '                                        └─┐ ┌─┐ └─┐     └─┐         ┌─┐              ',
            '                                          └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐          ',
            '                                              └─┘         └─┐     └─┐ └─┘ └─┐        ',
            '                                                        ┌───┘   ┌───┘   ┌───┘        ',
            '                                                        └─┐ ┌─┐ └─┐     └─┐ ┌─┐      ',
            '                                                          └─┘ │ ┌─┘       └─┘ │ ┌─┐  ',
            '                                                              └─┘             └─┘ └─┐',
            '                                                                                ┌───┘',
            '                                                                    ┌─┐     ┌─┐ └─┐  ',
            '                                                                  ┌─┘ │ ┌───┘ │ ┌─┘  ',
            '                                                                  └─┐ └─┘     └─┘    ',
            '                                                                ┌───┘                ',
            '                    ┌─┐                             ┌─┐         └─┐ ┌─┐              ',
            '                  ┌─┘ │ ┌─┐                       ┌─┘ │ ┌─┐       └─┘ │ ┌─┐          ',
            '                  └─┐ └─┘ └─┐                     └─┐ └─┘ └─┐         └─┘ └─┐        ',
            '                ┌───┘   ┌───┘                   ┌───┘   ┌───┘           ┌───┘        ',
            '            ┌─┐ └─┐     └─┐         ┌─┐     ┌─┐ └─┐     └─┐         ┌─┐ └─┐          ',
            '          ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌───┘ │ ┌─┘       │       ┌─┘ │ ┌─┘          ',
            '          └─┐ └─┘         └─┐     └─┐ └─┘     └─┘         └─┐     └─┐ └─┘            ',
            '        ┌───┘           ┌───┘   ┌───┘                   ┌───┘   ┌───┘                ',
            '        └─┐ ┌─┐         └─┐ ┌─┐ └─┐                     └─┐ ┌─┐ └─┐                  ',
            '          └─┘ │ ┌─┐       └─┘ │ ┌─┘                       └─┘ │ ┌─┘                  ',
            '              └─┘ └─┐         └─┘                             └─┘                    ',
            '                ┌───┘                                                                ',
            '    ┌─┐     ┌─┐ └─┐                                                                  ',
            '  ┌─┘ │ ┌───┘ │ ┌─┘                                                                  ',
            '  └─┐ └─┘     └─┘                                                                    ',
            '┌───┘                                                                                ',
            '└─┐ ┌─┐             ┌─┐                                                              ',
            '  └─┘ │ ┌─┐       ┌─┘ │ ┌─┐                                                          ',
            '      └─┘ └─┐     └─┐ └─┘ └─┐                                                        ',
            '        ┌───┘   ┌───┘   ┌───┘                                                        ',
            '        └─┐ ┌─┐ └─┐     └─┐         ┌─┐                                              ',
            '          └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐                                          ',
            '              └─┘         └─┐     └─┐ └─┘ └─┐                                        ',
            '                        ┌───┘   ┌───┘   ┌───┘                                        ',
            '                        └─┐ ┌─┐ └─┐     └─┐ ┌─┐                                      ',
            '                          └─┘ │ ┌─┘       └─┘ │ ┌─┐                                  ',
            '                              └─┘             └─┘ └─┐                                ',
            '                                                ┌───┘                                ',
            '                                    ┌─┐     ┌─┐ └─┐                                  ',
            '                                  ┌─┘ │ ┌───┘ │ ┌─┘                                  ',
            '                                  └─┐ └─┘     └─┘                                    ',
            '                                ┌───┘                                                ',
            '                                └─┐ ┌─┐                                              ',
            '                                  └─┘ │ ┌─┐                                          ',
            '                                      └─┘ └─┐                                        ',
            '                                        ┌───┘                                        ',
            '                                        └─┐                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 3, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 inverse=true rotation=right', () => {
        let expected = [
            '│',
            '│',
        ];

        let result = new MinkowskiSausage().create(0, { inverse: true, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 inverse=true rotation=right', () => {
        let expected = [
            '  │  ',
            '┌─┘  ',
            '└───┐',
            '  ┌─┘',
            '  │  ',
        ];

        let result = new MinkowskiSausage().create(1, { inverse: true, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 inverse=true rotation=right', () => {
        let expected = [
            '          │          ',
            '        ┌─┘          ',
            '        └───┐        ',
            '      ┌─┐ ┌─┘        ',
            '  ┌─┐ │ └─┘          ',
            '┌─┘ └─┘              ',
            '└───┐                ',
            '  ┌─┘ ┌─┐     ┌─┐    ',
            '  └─┐ │ └───┐ │ └─┐  ',
            '    └─┘     └─┘ ┌─┘  ',
            '                └───┐',
            '              ┌─┐ ┌─┘',
            '          ┌─┐ │ └─┘  ',
            '        ┌─┘ └─┘      ',
            '        └───┐        ',
            '          ┌─┘        ',
            '          │          ',
        ];

        let result = new MinkowskiSausage().create(2, { inverse: true, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 inverse=true rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                        ┌─┘                                          ',
            '                                        └───┐                                        ',
            '                                      ┌─┐ ┌─┘                                        ',
            '                                  ┌─┐ │ └─┘                                          ',
            '                                ┌─┘ └─┘                                              ',
            '                                └───┐                                                ',
            '                                  ┌─┘ ┌─┐     ┌─┐                                    ',
            '                                  └─┐ │ └───┐ │ └─┐                                  ',
            '                                    └─┘     └─┘ ┌─┘                                  ',
            '                                                └───┐                                ',
            '                              ┌─┐             ┌─┐ ┌─┘                                ',
            '                          ┌─┐ │ └─┐       ┌─┐ │ └─┘                                  ',
            '                        ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘                                      ',
            '                        └───┐   └───┐   └───┐                                        ',
            '              ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘                                        ',
            '          ┌─┐ │ └─┐       │       └─┐ │ └─┘                                          ',
            '        ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘                                              ',
            '        └───┐   └───┐   └───┐                                                        ',
            '      ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘                                                        ',
            '  ┌─┐ │ └─┘       └─┐ │ └─┘                                                          ',
            '┌─┘ └─┘             └─┘                                                              ',
            '└───┐                                                                                ',
            '  ┌─┘ ┌─┐     ┌─┐                                                                    ',
            '  └─┐ │ └───┐ │ └─┐                                                                  ',
            '    └─┘     └─┘ ┌─┘                                                                  ',
            '                └───┐                                                                ',
            '              ┌─┐ ┌─┘         ┌─┐                             ┌─┐                    ',
            '          ┌─┐ │ └─┘       ┌─┐ │ └─┐                       ┌─┐ │ └─┐                  ',
            '        ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘                     ┌─┘ └─┘ ┌─┘                  ',
            '        └───┐           └───┐   └───┐                   └───┐   └───┐                ',
            '          ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐     ┌─┐         ┌─┘     ┌─┘ ┌─┐            ',
            '          └─┐ │ └─┐       │       └─┐ │ └───┐ │ └─┐       │       └─┐ │ └─┐          ',
            '            └─┘ ┌─┘     ┌─┘         └─┘     └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘          ',
            '                └───┐   └───┐                   └───┐   └───┐           └───┐        ',
            '                  ┌─┘ ┌─┐ ┌─┘                     ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘        ',
            '                  └─┐ │ └─┘                       └─┐ │ └─┘       ┌─┐ │ └─┘          ',
            '                    └─┘                             └─┘         ┌─┘ └─┘              ',
            '                                                                └───┐                ',
            '                                                                  ┌─┘ ┌─┐     ┌─┐    ',
            '                                                                  └─┐ │ └───┐ │ └─┐  ',
            '                                                                    └─┘     └─┘ ┌─┘  ',
            '                                                                                └───┐',
            '                                                              ┌─┐             ┌─┐ ┌─┘',
            '                                                          ┌─┐ │ └─┐       ┌─┐ │ └─┘  ',
            '                                                        ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘      ',
            '                                                        └───┐   └───┐   └───┐        ',
            '                                              ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘        ',
            '                                          ┌─┐ │ └─┐       │       └─┐ │ └─┘          ',
            '                                        ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘              ',
            '                                        └───┐   └───┐   └───┐                        ',
            '                                      ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘                        ',
            '                                  ┌─┐ │ └─┘       └─┐ │ └─┘                          ',
            '                                ┌─┘ └─┘             └─┘                              ',
            '                                └───┐                                                ',
            '                                  ┌─┘ ┌─┐     ┌─┐                                    ',
            '                                  └─┐ │ └───┐ │ └─┐                                  ',
            '                                    └─┘     └─┘ ┌─┘                                  ',
            '                                                └───┐                                ',
            '                                              ┌─┐ ┌─┘                                ',
            '                                          ┌─┐ │ └─┘                                  ',
            '                                        ┌─┘ └─┘                                      ',
            '                                        └───┐                                        ',
            '                                          ┌─┘                                        ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { inverse: true, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 inverse=true rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 0, inverse: true, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 inverse=true rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '          ┌───────────────────────────────┘                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          │                                                                          ',
            '          └───────────────────────────────────────────────────────────────┐          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                                                          │          ',
            '                                          ┌───────────────────────────────┘          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 1, inverse: true, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 inverse=true rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                  ┌───────┘                                          ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  └───────────────┐                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                          ┌───────┐       ┌───────┘                                  ',
            '                          │       │       │                                          ',
            '                          │       │       │                                          ',
            '                          │       │       │                                          ',
            '          ┌───────┐       │       └───────┘                                          ',
            '          │       │       │                                                          ',
            '          │       │       │                                                          ',
            '          │       │       │                                                          ',
            '  ┌───────┘       └───────┘                                                          ',
            '  │                                                                                  ',
            '  │                                                                                  ',
            '  │                                                                                  ',
            '  └───────────────┐                                                                  ',
            '                  │                                                                  ',
            '                  │                                                                  ',
            '                  │                                                                  ',
            '          ┌───────┘       ┌───────┐                       ┌───────┐                  ',
            '          │               │       │                       │       │                  ',
            '          │               │       │                       │       │                  ',
            '          │               │       │                       │       │                  ',
            '          └───────┐       │       └───────────────┐       │       └───────┐          ',
            '                  │       │                       │       │               │          ',
            '                  │       │                       │       │               │          ',
            '                  │       │                       │       │               │          ',
            '                  └───────┘                       └───────┘       ┌───────┘          ',
            '                                                                  │                  ',
            '                                                                  │                  ',
            '                                                                  │                  ',
            '                                                                  └───────────────┐  ',
            '                                                                                  │  ',
            '                                                                                  │  ',
            '                                                                                  │  ',
            '                                                          ┌───────┐       ┌───────┘  ',
            '                                                          │       │       │          ',
            '                                                          │       │       │          ',
            '                                                          │       │       │          ',
            '                                          ┌───────┐       │       └───────┘          ',
            '                                          │       │       │                          ',
            '                                          │       │       │                          ',
            '                                          │       │       │                          ',
            '                                  ┌───────┘       └───────┘                          ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  │                                                  ',
            '                                  └───────────────┐                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                                  │                                  ',
            '                                          ┌───────┘                                  ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 2, inverse: true, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 inverse=true rotation=right', () => {
        let expected = [
            '                                          │                                          ',
            '                                        ┌─┘                                          ',
            '                                        └───┐                                        ',
            '                                      ┌─┐ ┌─┘                                        ',
            '                                  ┌─┐ │ └─┘                                          ',
            '                                ┌─┘ └─┘                                              ',
            '                                └───┐                                                ',
            '                                  ┌─┘ ┌─┐     ┌─┐                                    ',
            '                                  └─┐ │ └───┐ │ └─┐                                  ',
            '                                    └─┘     └─┘ ┌─┘                                  ',
            '                                                └───┐                                ',
            '                              ┌─┐             ┌─┐ ┌─┘                                ',
            '                          ┌─┐ │ └─┐       ┌─┐ │ └─┘                                  ',
            '                        ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘                                      ',
            '                        └───┐   └───┐   └───┐                                        ',
            '              ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘                                        ',
            '          ┌─┐ │ └─┐       │       └─┐ │ └─┘                                          ',
            '        ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘                                              ',
            '        └───┐   └───┐   └───┐                                                        ',
            '      ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘                                                        ',
            '  ┌─┐ │ └─┘       └─┐ │ └─┘                                                          ',
            '┌─┘ └─┘             └─┘                                                              ',
            '└───┐                                                                                ',
            '  ┌─┘ ┌─┐     ┌─┐                                                                    ',
            '  └─┐ │ └───┐ │ └─┐                                                                  ',
            '    └─┘     └─┘ ┌─┘                                                                  ',
            '                └───┐                                                                ',
            '              ┌─┐ ┌─┘         ┌─┐                             ┌─┐                    ',
            '          ┌─┐ │ └─┘       ┌─┐ │ └─┐                       ┌─┐ │ └─┐                  ',
            '        ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘                     ┌─┘ └─┘ ┌─┘                  ',
            '        └───┐           └───┐   └───┐                   └───┐   └───┐                ',
            '          ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐     ┌─┐         ┌─┘     ┌─┘ ┌─┐            ',
            '          └─┐ │ └─┐       │       └─┐ │ └───┐ │ └─┐       │       └─┐ │ └─┐          ',
            '            └─┘ ┌─┘     ┌─┘         └─┘     └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘          ',
            '                └───┐   └───┐                   └───┐   └───┐           └───┐        ',
            '                  ┌─┘ ┌─┐ ┌─┘                     ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘        ',
            '                  └─┐ │ └─┘                       └─┐ │ └─┘       ┌─┐ │ └─┘          ',
            '                    └─┘                             └─┘         ┌─┘ └─┘              ',
            '                                                                └───┐                ',
            '                                                                  ┌─┘ ┌─┐     ┌─┐    ',
            '                                                                  └─┐ │ └───┐ │ └─┐  ',
            '                                                                    └─┘     └─┘ ┌─┘  ',
            '                                                                                └───┐',
            '                                                              ┌─┐             ┌─┐ ┌─┘',
            '                                                          ┌─┐ │ └─┐       ┌─┐ │ └─┘  ',
            '                                                        ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘      ',
            '                                                        └───┐   └───┐   └───┐        ',
            '                                              ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘        ',
            '                                          ┌─┐ │ └─┐       │       └─┐ │ └─┘          ',
            '                                        ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘              ',
            '                                        └───┐   └───┐   └───┐                        ',
            '                                      ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘                        ',
            '                                  ┌─┐ │ └─┘       └─┐ │ └─┘                          ',
            '                                ┌─┘ └─┘             └─┘                              ',
            '                                └───┐                                                ',
            '                                  ┌─┘ ┌─┐     ┌─┐                                    ',
            '                                  └─┐ │ └───┐ │ └─┐                                  ',
            '                                    └─┘     └─┘ ┌─┘                                  ',
            '                                                └───┐                                ',
            '                                              ┌─┐ ┌─┘                                ',
            '                                          ┌─┐ │ └─┘                                  ',
            '                                        ┌─┘ └─┘                                      ',
            '                                        └───┐                                        ',
            '                                          ┌─┘                                        ',
            '                                          │                                          ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 3, inverse: true, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 rotation=flip', () => {
        let expected = [
            ' ───',
        ];

        let result = new MinkowskiSausage().create(0, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 rotation=flip', () => {
        let expected = [
            '   ┌─┐   ',
            ' ──┘ │ ┌──',
            '     └─┘ ',
        ];

        let result = new MinkowskiSausage().create(1, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 rotation=flip', () => {
        let expected = [
            '           ┌─┐                   ',
            '         ┌─┘ │ ┌─┐               ',
            '         └─┐ └─┘ └─┐             ',
            '       ┌───┘   ┌───┘             ',
            '   ┌─┐ └─┐     └─┐         ┌─┐   ',
            ' ──┘ │ ┌─┘       │       ┌─┘ │ ┌──',
            '     └─┘         └─┐     └─┐ └─┘ ',
            '               ┌───┘   ┌───┘     ',
            '               └─┐ ┌─┐ └─┐       ',
            '                 └─┘ │ ┌─┘       ',
            '                     └─┘         ',
        ];

        let result = new MinkowskiSausage().create(2, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 rotation=flip', () => {
        let expected = [
            '                                           ┌─┐                                                                                   ',
            '                                         ┌─┘ │ ┌─┐                                                                               ',
            '                                         └─┐ └─┘ └─┐                                                                             ',
            '                                       ┌───┘   ┌───┘                                                                             ',
            '                                   ┌─┐ └─┐     └─┐         ┌─┐                                                                   ',
            '                                 ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐                                                               ',
            '                                 └─┐ └─┘         └─┐     └─┐ └─┘ └─┐                                                             ',
            '                               ┌───┘           ┌───┘   ┌───┘   ┌───┘                                                             ',
            '                               └─┐ ┌─┐         └─┐ ┌─┐ └─┐     └─┐ ┌─┐                                                           ',
            '                                 └─┘ │ ┌─┐       └─┘ │ ┌─┘       └─┘ │ ┌─┐                                                       ',
            '                                     └─┘ └─┐         └─┘             └─┘ └─┐                                                     ',
            '                                       ┌───┘                           ┌───┘                                                     ',
            '                           ┌─┐     ┌─┐ └─┐                 ┌─┐     ┌─┐ └─┐                                                       ',
            '                         ┌─┘ │ ┌───┘ │ ┌─┘               ┌─┘ │ ┌───┘ │ ┌─┘                                                       ',
            '                         └─┐ └─┘     └─┘                 └─┐ └─┘     └─┘                                                         ',
            '                       ┌───┘                           ┌───┘                                                                     ',
            '           ┌─┐         └─┐ ┌─┐                         └─┐ ┌─┐                                             ┌─┐                   ',
            '         ┌─┘ │ ┌─┐       └─┘ │ ┌─┐                       └─┘ │ ┌─┐                                       ┌─┘ │ ┌─┐               ',
            '         └─┐ └─┘ └─┐         └─┘ └─┐                         └─┘ └─┐                                     └─┐ └─┘ └─┐             ',
            '       ┌───┘   ┌───┘           ┌───┘                           ┌───┘                                   ┌───┘   ┌───┘             ',
            '   ┌─┐ └─┐     └─┐         ┌─┐ └─┐                             └─┐                                 ┌─┐ └─┐     └─┐         ┌─┐   ',
            ' ──┘ │ ┌─┘       │       ┌─┘ │ ┌─┘                               │                               ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌──',
            '     └─┘         └─┐     └─┐ └─┘                                 └─┐                             └─┐ └─┘         └─┐     └─┐ └─┘ ',
            '               ┌───┘   ┌───┘                                   ┌───┘                           ┌───┘           ┌───┘   ┌───┘     ',
            '               └─┐ ┌─┐ └─┐                                     └─┐ ┌─┐                         └─┐ ┌─┐         └─┐ ┌─┐ └─┐       ',
            '                 └─┘ │ ┌─┘                                       └─┘ │ ┌─┐                       └─┘ │ ┌─┐       └─┘ │ ┌─┘       ',
            '                     └─┘                                             └─┘ └─┐                         └─┘ └─┐         └─┘         ',
            '                                                                       ┌───┘                           ┌───┘                     ',
            '                                                           ┌─┐     ┌─┐ └─┐                 ┌─┐     ┌─┐ └─┐                       ',
            '                                                         ┌─┘ │ ┌───┘ │ ┌─┘               ┌─┘ │ ┌───┘ │ ┌─┘                       ',
            '                                                         └─┐ └─┘     └─┘                 └─┐ └─┘     └─┘                         ',
            '                                                       ┌───┘                           ┌───┘                                     ',
            '                                                       └─┐ ┌─┐             ┌─┐         └─┐ ┌─┐                                   ',
            '                                                         └─┘ │ ┌─┐       ┌─┘ │ ┌─┐       └─┘ │ ┌─┐                               ',
            '                                                             └─┘ └─┐     └─┐ └─┘ └─┐         └─┘ └─┐                             ',
            '                                                               ┌───┘   ┌───┘   ┌───┘           ┌───┘                             ',
            '                                                               └─┐ ┌─┐ └─┐     └─┐         ┌─┐ └─┐                               ',
            '                                                                 └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┘                               ',
            '                                                                     └─┘         └─┐     └─┐ └─┘                                 ',
            '                                                                               ┌───┘   ┌───┘                                     ',
            '                                                                               └─┐ ┌─┐ └─┐                                       ',
            '                                                                                 └─┘ │ ┌─┘                                       ',
            '                                                                                     └─┘                                         ',
        ];

        let result = new MinkowskiSausage().create(3, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 rotation=flip', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            ' ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 0, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 rotation=flip', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                 ┌───────────────────────────────┐                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            ' ────────────────────────────────┘                               │                               ┌────────────────────────────────',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 └───────────────────────────────┘                               ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 1, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 rotation=flip', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                         ┌───────┐                                                                               ',
            '                                         │       │                                                                               ',
            '                                         │       │                                                                               ',
            '                                         │       │                                                                               ',
            '                                 ┌───────┘       │       ┌───────┐                                                               ',
            '                                 │               │       │       │                                                               ',
            '                                 │               │       │       │                                                               ',
            '                                 │               │       │       │                                                               ',
            '                                 └───────┐       └───────┘       └───────┐                                                       ',
            '                                         │                               │                                                       ',
            '                                         │                               │                                                       ',
            '                                         │                               │                                                       ',
            '                         ┌───────────────┘               ┌───────────────┘                                                       ',
            '                         │                               │                                                                       ',
            '                         │                               │                                                                       ',
            '                         │                               │                                                                       ',
            '         ┌───────┐       └───────┐                       └───────┐                                       ┌───────┐               ',
            '         │       │               │                               │                                       │       │               ',
            '         │       │               │                               │                                       │       │               ',
            '         │       │               │                               │                                       │       │               ',
            ' ────────┘       │       ┌───────┘                               │                               ┌───────┘       │       ┌────────',
            '                 │       │                                       │                               │               │       │       ',
            '                 │       │                                       │                               │               │       │       ',
            '                 │       │                                       │                               │               │       │       ',
            '                 └───────┘                                       └───────┐                       └───────┐       └───────┘       ',
            '                                                                         │                               │                       ',
            '                                                                         │                               │                       ',
            '                                                                         │                               │                       ',
            '                                                         ┌───────────────┘               ┌───────────────┘                       ',
            '                                                         │                               │                                       ',
            '                                                         │                               │                                       ',
            '                                                         │                               │                                       ',
            '                                                         └───────┐       ┌───────┐       └───────┐                               ',
            '                                                                 │       │       │               │                               ',
            '                                                                 │       │       │               │                               ',
            '                                                                 │       │       │               │                               ',
            '                                                                 └───────┘       │       ┌───────┘                               ',
            '                                                                                 │       │                                       ',
            '                                                                                 │       │                                       ',
            '                                                                                 │       │                                       ',
            '                                                                                 └───────┘                                       ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 2, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 rotation=flip', () => {
        let expected = [
            '                                           ┌─┐                                                                                   ',
            '                                         ┌─┘ │ ┌─┐                                                                               ',
            '                                         └─┐ └─┘ └─┐                                                                             ',
            '                                       ┌───┘   ┌───┘                                                                             ',
            '                                   ┌─┐ └─┐     └─┐         ┌─┐                                                                   ',
            '                                 ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌─┐                                                               ',
            '                                 └─┐ └─┘         └─┐     └─┐ └─┘ └─┐                                                             ',
            '                               ┌───┘           ┌───┘   ┌───┘   ┌───┘                                                             ',
            '                               └─┐ ┌─┐         └─┐ ┌─┐ └─┐     └─┐ ┌─┐                                                           ',
            '                                 └─┘ │ ┌─┐       └─┘ │ ┌─┘       └─┘ │ ┌─┐                                                       ',
            '                                     └─┘ └─┐         └─┘             └─┘ └─┐                                                     ',
            '                                       ┌───┘                           ┌───┘                                                     ',
            '                           ┌─┐     ┌─┐ └─┐                 ┌─┐     ┌─┐ └─┐                                                       ',
            '                         ┌─┘ │ ┌───┘ │ ┌─┘               ┌─┘ │ ┌───┘ │ ┌─┘                                                       ',
            '                         └─┐ └─┘     └─┘                 └─┐ └─┘     └─┘                                                         ',
            '                       ┌───┘                           ┌───┘                                                                     ',
            '           ┌─┐         └─┐ ┌─┐                         └─┐ ┌─┐                                             ┌─┐                   ',
            '         ┌─┘ │ ┌─┐       └─┘ │ ┌─┐                       └─┘ │ ┌─┐                                       ┌─┘ │ ┌─┐               ',
            '         └─┐ └─┘ └─┐         └─┘ └─┐                         └─┘ └─┐                                     └─┐ └─┘ └─┐             ',
            '       ┌───┘   ┌───┘           ┌───┘                           ┌───┘                                   ┌───┘   ┌───┘             ',
            '   ┌─┐ └─┐     └─┐         ┌─┐ └─┐                             └─┐                                 ┌─┐ └─┐     └─┐         ┌─┐   ',
            ' ──┘ │ ┌─┘       │       ┌─┘ │ ┌─┘                               │                               ┌─┘ │ ┌─┘       │       ┌─┘ │ ┌──',
            '     └─┘         └─┐     └─┐ └─┘                                 └─┐                             └─┐ └─┘         └─┐     └─┐ └─┘ ',
            '               ┌───┘   ┌───┘                                   ┌───┘                           ┌───┘           ┌───┘   ┌───┘     ',
            '               └─┐ ┌─┐ └─┐                                     └─┐ ┌─┐                         └─┐ ┌─┐         └─┐ ┌─┐ └─┐       ',
            '                 └─┘ │ ┌─┘                                       └─┘ │ ┌─┐                       └─┘ │ ┌─┐       └─┘ │ ┌─┘       ',
            '                     └─┘                                             └─┘ └─┐                         └─┘ └─┐         └─┘         ',
            '                                                                       ┌───┘                           ┌───┘                     ',
            '                                                           ┌─┐     ┌─┐ └─┐                 ┌─┐     ┌─┐ └─┐                       ',
            '                                                         ┌─┘ │ ┌───┘ │ ┌─┘               ┌─┘ │ ┌───┘ │ ┌─┘                       ',
            '                                                         └─┐ └─┘     └─┘                 └─┐ └─┘     └─┘                         ',
            '                                                       ┌───┘                           ┌───┘                                     ',
            '                                                       └─┐ ┌─┐             ┌─┐         └─┐ ┌─┐                                   ',
            '                                                         └─┘ │ ┌─┐       ┌─┘ │ ┌─┐       └─┘ │ ┌─┐                               ',
            '                                                             └─┘ └─┐     └─┐ └─┘ └─┐         └─┘ └─┐                             ',
            '                                                               ┌───┘   ┌───┘   ┌───┘           ┌───┘                             ',
            '                                                               └─┐ ┌─┐ └─┐     └─┐         ┌─┐ └─┐                               ',
            '                                                                 └─┘ │ ┌─┘       │       ┌─┘ │ ┌─┘                               ',
            '                                                                     └─┘         └─┐     └─┐ └─┘                                 ',
            '                                                                               ┌───┘   ┌───┘                                     ',
            '                                                                               └─┐ ┌─┐ └─┐                                       ',
            '                                                                                 └─┘ │ ┌─┘                                       ',
            '                                                                                     └─┘                                         ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 3, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 inverse=true rotation=flip', () => {
        let expected = [
            ' ───',
        ];

        let result = new MinkowskiSausage().create(0, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 inverse=true rotation=flip', () => {
        let expected = [
            '     ┌─┐ ',
            ' ──┐ │ └──',
            '   └─┘   ',
        ];

        let result = new MinkowskiSausage().create(1, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 inverse=true rotation=flip', () => {
        let expected = [
            '                     ┌─┐         ',
            '                 ┌─┐ │ └─┐       ',
            '               ┌─┘ └─┘ ┌─┘       ',
            '               └───┐   └───┐     ',
            '     ┌─┐         ┌─┘     ┌─┘ ┌─┐ ',
            ' ──┐ │ └─┐       │       └─┐ │ └──',
            '   └─┘ ┌─┘     ┌─┘         └─┘   ',
            '       └───┐   └───┐             ',
            '         ┌─┘ ┌─┐ ┌─┘             ',
            '         └─┐ │ └─┘               ',
            '           └─┘                   ',
        ];

        let result = new MinkowskiSausage().create(2, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 inverse=true rotation=flip', () => {
        let expected = [
            '                                                                                     ┌─┐                                         ',
            '                                                                                 ┌─┐ │ └─┐                                       ',
            '                                                                               ┌─┘ └─┘ ┌─┘                                       ',
            '                                                                               └───┐   └───┐                                     ',
            '                                                                     ┌─┐         ┌─┘     ┌─┘ ┌─┐                                 ',
            '                                                                 ┌─┐ │ └─┐       │       └─┐ │ └─┐                               ',
            '                                                               ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘                               ',
            '                                                               └───┐   └───┐   └───┐           └───┐                             ',
            '                                                             ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘                             ',
            '                                                         ┌─┐ │ └─┘       └─┐ │ └─┘       ┌─┐ │ └─┘                               ',
            '                                                       ┌─┘ └─┘             └─┘         ┌─┘ └─┘                                   ',
            '                                                       └───┐                           └───┐                                     ',
            '                                                         ┌─┘ ┌─┐     ┌─┐                 ┌─┘ ┌─┐     ┌─┐                         ',
            '                                                         └─┐ │ └───┐ │ └─┐               └─┐ │ └───┐ │ └─┐                       ',
            '                                                           └─┘     └─┘ ┌─┘                 └─┘     └─┘ ┌─┘                       ',
            '                                                                       └───┐                           └───┐                     ',
            '                     ┌─┐                                             ┌─┐ ┌─┘                         ┌─┐ ┌─┘         ┌─┐         ',
            '                 ┌─┐ │ └─┐                                       ┌─┐ │ └─┘                       ┌─┐ │ └─┘       ┌─┐ │ └─┐       ',
            '               ┌─┘ └─┘ ┌─┘                                     ┌─┘ └─┘                         ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘       ',
            '               └───┐   └───┐                                   └───┐                           └───┐           └───┐   └───┐     ',
            '     ┌─┐         ┌─┘     ┌─┘ ┌─┐                                 ┌─┘                             ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐ ',
            ' ──┐ │ └─┐       │       └─┐ │ └─┐                               │                               └─┐ │ └─┐       │       └─┐ │ └──',
            '   └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘                             ┌─┘                                 └─┘ ┌─┘     ┌─┘         └─┘   ',
            '       └───┐   └───┐           └───┐                           └───┐                                   └───┐   └───┐             ',
            '         ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘                         ┌─┐ ┌─┘                                     ┌─┘ ┌─┐ ┌─┘             ',
            '         └─┐ │ └─┘       ┌─┐ │ └─┘                       ┌─┐ │ └─┘                                       └─┐ │ └─┘               ',
            '           └─┘         ┌─┘ └─┘                         ┌─┘ └─┘                                             └─┘                   ',
            '                       └───┐                           └───┐                                                                     ',
            '                         ┌─┘ ┌─┐     ┌─┐                 ┌─┘ ┌─┐     ┌─┐                                                         ',
            '                         └─┐ │ └───┐ │ └─┐               └─┐ │ └───┐ │ └─┐                                                       ',
            '                           └─┘     └─┘ ┌─┘                 └─┘     └─┘ ┌─┘                                                       ',
            '                                       └───┐                           └───┐                                                     ',
            '                                     ┌─┐ ┌─┘         ┌─┐             ┌─┐ ┌─┘                                                     ',
            '                                 ┌─┐ │ └─┘       ┌─┐ │ └─┐       ┌─┐ │ └─┘                                                       ',
            '                               ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘                                                           ',
            '                               └───┐           └───┐   └───┐   └───┐                                                             ',
            '                                 ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘                                                             ',
            '                                 └─┐ │ └─┐       │       └─┐ │ └─┘                                                               ',
            '                                   └─┘ ┌─┘     ┌─┘         └─┘                                                                   ',
            '                                       └───┐   └───┐                                                                             ',
            '                                         ┌─┘ ┌─┐ ┌─┘                                                                             ',
            '                                         └─┐ │ └─┘                                                                               ',
            '                                           └─┘                                                                                   ',
        ];

        let result = new MinkowskiSausage().create(3, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=0 inverse=true rotation=flip', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            ' ─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 0, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=1 inverse=true rotation=flip', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                 ┌───────────────────────────────┐                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            '                                                                 │                               │                               ',
            ' ────────────────────────────────┐                               │                               └────────────────────────────────',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 │                               │                                                               ',
            '                                 └───────────────────────────────┘                                                               ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 1, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=2 inverse=true rotation=flip', () => {
        let expected = [
            '                                                                                                                                 ',
            '                                                                                 ┌───────┐                                       ',
            '                                                                                 │       │                                       ',
            '                                                                                 │       │                                       ',
            '                                                                                 │       │                                       ',
            '                                                                 ┌───────┐       │       └───────┐                               ',
            '                                                                 │       │       │               │                               ',
            '                                                                 │       │       │               │                               ',
            '                                                                 │       │       │               │                               ',
            '                                                         ┌───────┘       └───────┘       ┌───────┘                               ',
            '                                                         │                               │                                       ',
            '                                                         │                               │                                       ',
            '                                                         │                               │                                       ',
            '                                                         └───────────────┐               └───────────────┐                       ',
            '                                                                         │                               │                       ',
            '                                                                         │                               │                       ',
            '                                                                         │                               │                       ',
            '                 ┌───────┐                                       ┌───────┘                       ┌───────┘       ┌───────┐       ',
            '                 │       │                                       │                               │               │       │       ',
            '                 │       │                                       │                               │               │       │       ',
            '                 │       │                                       │                               │               │       │       ',
            ' ────────┐       │       └───────┐                               │                               └───────┐       │       └────────',
            '         │       │               │                               │                                       │       │               ',
            '         │       │               │                               │                                       │       │               ',
            '         │       │               │                               │                                       │       │               ',
            '         └───────┘       ┌───────┘                       ┌───────┘                                       └───────┘               ',
            '                         │                               │                                                                       ',
            '                         │                               │                                                                       ',
            '                         │                               │                                                                       ',
            '                         └───────────────┐               └───────────────┐                                                       ',
            '                                         │                               │                                                       ',
            '                                         │                               │                                                       ',
            '                                         │                               │                                                       ',
            '                                 ┌───────┘       ┌───────┐       ┌───────┘                                                       ',
            '                                 │               │       │       │                                                               ',
            '                                 │               │       │       │                                                               ',
            '                                 │               │       │       │                                                               ',
            '                                 └───────┐       │       └───────┘                                                               ',
            '                                         │       │                                                                               ',
            '                                         │       │                                                                               ',
            '                                         │       │                                                                               ',
            '                                         └───────┘                                                                               ',
            '                                                                                                                                 ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 2, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 step=3 inverse=true rotation=flip', () => {
        let expected = [
            '                                                                                     ┌─┐                                         ',
            '                                                                                 ┌─┐ │ └─┐                                       ',
            '                                                                               ┌─┘ └─┘ ┌─┘                                       ',
            '                                                                               └───┐   └───┐                                     ',
            '                                                                     ┌─┐         ┌─┘     ┌─┘ ┌─┐                                 ',
            '                                                                 ┌─┐ │ └─┐       │       └─┐ │ └─┐                               ',
            '                                                               ┌─┘ └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘                               ',
            '                                                               └───┐   └───┐   └───┐           └───┐                             ',
            '                                                             ┌─┐ ┌─┘     ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘                             ',
            '                                                         ┌─┐ │ └─┘       └─┐ │ └─┘       ┌─┐ │ └─┘                               ',
            '                                                       ┌─┘ └─┘             └─┘         ┌─┘ └─┘                                   ',
            '                                                       └───┐                           └───┐                                     ',
            '                                                         ┌─┘ ┌─┐     ┌─┐                 ┌─┘ ┌─┐     ┌─┐                         ',
            '                                                         └─┐ │ └───┐ │ └─┐               └─┐ │ └───┐ │ └─┐                       ',
            '                                                           └─┘     └─┘ ┌─┘                 └─┘     └─┘ ┌─┘                       ',
            '                                                                       └───┐                           └───┐                     ',
            '                     ┌─┐                                             ┌─┐ ┌─┘                         ┌─┐ ┌─┘         ┌─┐         ',
            '                 ┌─┐ │ └─┐                                       ┌─┐ │ └─┘                       ┌─┐ │ └─┘       ┌─┐ │ └─┐       ',
            '               ┌─┘ └─┘ ┌─┘                                     ┌─┘ └─┘                         ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘       ',
            '               └───┐   └───┐                                   └───┐                           └───┐           └───┐   └───┐     ',
            '     ┌─┐         ┌─┘     ┌─┘ ┌─┐                                 ┌─┘                             ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐ ',
            ' ──┐ │ └─┐       │       └─┐ │ └─┐                               │                               └─┐ │ └─┐       │       └─┐ │ └──',
            '   └─┘ ┌─┘     ┌─┘         └─┘ ┌─┘                             ┌─┘                                 └─┘ ┌─┘     ┌─┘         └─┘   ',
            '       └───┐   └───┐           └───┐                           └───┐                                   └───┐   └───┐             ',
            '         ┌─┘ ┌─┐ ┌─┘         ┌─┐ ┌─┘                         ┌─┐ ┌─┘                                     ┌─┘ ┌─┐ ┌─┘             ',
            '         └─┐ │ └─┘       ┌─┐ │ └─┘                       ┌─┐ │ └─┘                                       └─┐ │ └─┘               ',
            '           └─┘         ┌─┘ └─┘                         ┌─┘ └─┘                                             └─┘                   ',
            '                       └───┐                           └───┐                                                                     ',
            '                         ┌─┘ ┌─┐     ┌─┐                 ┌─┘ ┌─┐     ┌─┐                                                         ',
            '                         └─┐ │ └───┐ │ └─┐               └─┐ │ └───┐ │ └─┐                                                       ',
            '                           └─┘     └─┘ ┌─┘                 └─┘     └─┘ ┌─┘                                                       ',
            '                                       └───┐                           └───┐                                                     ',
            '                                     ┌─┐ ┌─┘         ┌─┐             ┌─┐ ┌─┘                                                     ',
            '                                 ┌─┐ │ └─┘       ┌─┐ │ └─┐       ┌─┐ │ └─┘                                                       ',
            '                               ┌─┘ └─┘         ┌─┘ └─┘ ┌─┘     ┌─┘ └─┘                                                           ',
            '                               └───┐           └───┐   └───┐   └───┐                                                             ',
            '                                 ┌─┘ ┌─┐         ┌─┘     ┌─┘ ┌─┐ ┌─┘                                                             ',
            '                                 └─┐ │ └─┐       │       └─┐ │ └─┘                                                               ',
            '                                   └─┘ ┌─┘     ┌─┘         └─┘                                                                   ',
            '                                       └───┐   └───┐                                                                             ',
            '                                         ┌─┘ ┌─┐ ┌─┘                                                                             ',
            '                                         └─┐ │ └─┘                                                                               ',
            '                                           └─┘                                                                                   ',
        ];

        let result = new MinkowskiSausage().create(3, { step: 3, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });
});