const { MooreCurve } = require('../../src/fractals/mooreCurve');
const { Utils } = require('../../src/utils');

describe('MooreCurve Tests', () => {
    test('generate n=1', () => {
        let expected = [
            '┌─┐',
            '│ │',
        ];

        let result = new MooreCurve().create(1, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2', () => {
        let expected = [
            '┌─────┐',
            '└─┐ ┌─┘',
            '┌─┘ └─┐',
            '└─┐ ┌─┘',
        ];

        let result = new MooreCurve().create(2, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3', () => {
        let expected = [
            '┌───┐ ┌─┐ ┌───┐',
            '└─┐ └─┘ └─┘ ┌─┘',
            '┌─┘ ┌─┐ ┌─┐ └─┐',
            '└───┘ │ │ └───┘',
            '┌───┐ │ │ ┌───┐',
            '└─┐ └─┘ └─┘ ┌─┘',
            '┌─┘ ┌─┐ ┌─┐ └─┐',
            '└───┘ │ │ └───┘',
        ];

        let result = new MooreCurve().create(3, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=4', () => {
        let expected = [
            '┌───┐ ┌───┐ ┌─────┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ ┌─┘ └───┘ └───┘',
        ];

        let result = new MooreCurve().create(4, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5', () => {
        let expected = [
            '┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ │ └───┘ └───┘ │ │ └───┘ └───┘ │ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └───┘ └───┘ └───┘ │ │ └───┘ └───┘ └───┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ │ └───┘ └───┘ │ │ └───┘ └───┘ │ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └───┘ └───┘ └───┘ │ │ └───┘ └───┘ └───┘ └───┘ └───┘',
        ];

        let result = new MooreCurve().create(5, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=1', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '               ┌───────────────────────────────┐               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 1 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=2', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '       ┌───────────────────────────────────────────────┐       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       └───────────────┐               ┌───────────────┘       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '       ┌───────────────┘               └───────────────┐       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       └───────────────┐               ┌───────────────┘       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
        ];

        let result = new MooreCurve().create(5, { step: 2 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=3', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '   ┌───────────────┐       ┌───────┐       ┌───────────────┐   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   └───────┐       └───────┘       └───────┘       ┌───────┘   ',
            '           │                                       │           ',
            '           │                                       │           ',
            '           │                                       │           ',
            '   ┌───────┘       ┌───────┐       ┌───────┐       └───────┐   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   └───────────────┘       │       │       └───────────────┘   ',
            '                           │       │                           ',
            '                           │       │                           ',
            '                           │       │                           ',
            '   ┌───────────────┐       │       │       ┌───────────────┐   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   └───────┐       └───────┘       └───────┘       ┌───────┘   ',
            '           │                                       │           ',
            '           │                                       │           ',
            '           │                                       │           ',
            '   ┌───────┘       ┌───────┐       ┌───────┐       └───────┐   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   └───────────────┘       │       │       └───────────────┘   ',
            '                           │       │                           ',
        ];

        let result = new MooreCurve().create(5, { step: 3 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=4', () => {
        let expected = [
            '                                                               ',
            ' ┌───────┐   ┌───────┐   ┌───────────┐   ┌───────┐   ┌───────┐ ',
            ' │       │   │       │   │           │   │       │   │       │ ',
            ' └───┐   └───┘   ┌───┘   └───┐   ┌───┘   └───┐   └───┘   ┌───┘ ',
            '     │           │           │   │           │           │     ',
            ' ┌───┘   ┌───┐   │   ┌───┐   │   │   ┌───┐   │   ┌───┐   └───┐ ',
            ' │       │   │   │   │   │   │   │   │   │   │   │   │       │ ',
            ' └───────┘   │   └───┘   └───┘   └───┘   └───┘   │   └───────┘ ',
            '             │                                   │             ',
            ' ┌───────┐   │   ┌───┐   ┌───┐   ┌───┐   ┌───┐   │   ┌───────┐ ',
            ' │       │   │   │   │   │   │   │   │   │   │   │   │       │ ',
            ' └───┐   └───┘   │   └───┘   │   │   └───┘   │   └───┘   ┌───┘ ',
            '     │           │           │   │           │           │     ',
            ' ┌───┘   ┌───┐   └───┐   ┌───┘   └───┐   ┌───┘   ┌───┐   └───┐ ',
            ' │       │   │       │   │           │   │       │   │       │ ',
            ' └───────┘   └───────┘   └───┐   ┌───┘   └───────┘   └───────┘ ',
            '                             │   │                             ',
            ' ┌───────┐   ┌───────┐   ┌───┘   └───┐   ┌───────┐   ┌───────┐ ',
            ' │       │   │       │   │           │   │       │   │       │ ',
            ' └───┐   └───┘   ┌───┘   └───┐   ┌───┘   └───┐   └───┘   ┌───┘ ',
            '     │           │           │   │           │           │     ',
            ' ┌───┘   ┌───┐   │   ┌───┐   │   │   ┌───┐   │   ┌───┐   └───┐ ',
            ' │       │   │   │   │   │   │   │   │   │   │   │   │       │ ',
            ' └───────┘   │   └───┘   └───┘   └───┘   └───┘   │   └───────┘ ',
            '             │                                   │             ',
            ' ┌───────┐   │   ┌───┐   ┌───┐   ┌───┐   ┌───┐   │   ┌───────┐ ',
            ' │       │   │   │   │   │   │   │   │   │   │   │   │       │ ',
            ' └───┐   └───┘   │   └───┘   │   │   └───┘   │   └───┘   ┌───┘ ',
            '     │           │           │   │           │           │     ',
            ' ┌───┘   ┌───┐   └───┐   ┌───┘   └───┐   ┌───┘   ┌───┐   └───┐ ',
            ' │       │   │       │   │           │   │       │   │       │ ',
            ' └───────┘   └───────┘   └───┐   ┌───┘   └───────┘   └───────┘ ',
        ];

        let result = new MooreCurve().create(5, { step: 4 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=5', () => {
        let expected = [
            '┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ │ └───┘ └───┘ │ │ └───┘ └───┘ │ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └───┘ └───┘ └───┘ │ │ └───┘ └───┘ └───┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ │ └───┘ └───┘ │ │ └───┘ └───┘ │ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └───┘ └───┘ └───┘ │ │ └───┘ └───┘ └───┘ └───┘ └───┘',
        ];

        let result = new MooreCurve().create(5, { step: 5 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 rotation=left', () => {
        let expected = [
            '┌──',
            '└──',
        ];

        let result = new MooreCurve().create(1, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 rotation=left', () => {
        let expected = [
            '┌─┐ ┌─┐',
            '│ └─┘ └',
            '│ ┌─┐ ┌',
            '└─┘ └─┘',
        ];

        let result = new MooreCurve().create(2, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 rotation=left', () => {
        let expected = [
            '┌─┐ ┌─┐ ┌─┐ ┌─┐',
            '│ └─┘ │ │ └─┘ │',
            '└─┐ ┌─┘ └─┐ ┌─┘',
            '┌─┘ └─────┘ └──',
            '└─┐ ┌─────┐ ┌──',
            '┌─┘ └─┐ ┌─┘ └─┐',
            '│ ┌─┐ │ │ ┌─┐ │',
            '└─┘ └─┘ └─┘ └─┘',
        ];

        let result = new MooreCurve().create(3, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=4 rotation=left', () => {
        let expected = [
            '┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐',
            '│ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │',
            '└─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘',
            '┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐',
            '│ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ └─┘ └───┘ └───┘ └',
            '│ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ ┌',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ │ │ └───┘ └───┘ │',
            '└─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘',
            '┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐',
            '│ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │',
            '└─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘',
        ];

        let result = new MooreCurve().create(4, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 rotation=left', () => {
        let expected = [
            '┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐',
            '│ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │',
            '└─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘',
            '┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐',
            '│ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ └─┘ └───┘ └───┘ │ │ └───┘ └───┘ └─┘ └───┘ └───┘ │',
            '└─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘ └─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘',
            '┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐',
            '│ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │',
            '└─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘',
            '┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐',
            '│ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │',
            '└─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘',
            '┌─┘ └───┘ └───┘ └───┘ └───┘ └─────┘ └───┘ └───┘ └───┘ └───┘ └──',
            '└─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─────┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌──',
            '┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐',
            '│ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │',
            '└─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘',
            '┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐',
            '│ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │',
            '└─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘',
            '┌─┘ └───┘ └───┘ └───┘ └───┘ └─┐ ┌─┘ └───┘ └───┘ └───┘ └───┘ └─┐',
            '│ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ │ │ └───┘ └───┘ │ │ └───┘ └───┘ │ │ └───┘ └───┘ │',
            '└─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘',
            '┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐',
            '│ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │',
            '└─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘',
        ];

        let result = new MooreCurve().create(5, { rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=1 rotation=left', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '               ┌────────────────────────────────               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               │                                               ',
            '               └────────────────────────────────               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 1, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=2 rotation=left', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '       ┌───────────────┐               ┌───────────────┐       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               └───────────────┘               └───────',
            '       │                                                       ',
            '       │                                                       ',
            '       │                                                       ',
            '       │                                                       ',
            '       │                                                       ',
            '       │                                                       ',
            '       │                                                       ',
            '       │               ┌───────────────┐               ┌───────',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       └───────────────┘               └───────────────┘       ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 2, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=3 rotation=left', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '   ┌───────┐       ┌───────┐       ┌───────┐       ┌───────┐   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       └───────┘       │       │       └───────┘       │   ',
            '   │                       │       │                       │   ',
            '   │                       │       │                       │   ',
            '   │                       │       │                       │   ',
            '   └───────┐       ┌───────┘       └───────┐       ┌───────┘   ',
            '           │       │                       │       │           ',
            '           │       │                       │       │           ',
            '           │       │                       │       │           ',
            '   ┌───────┘       └───────────────────────┘       └───────────',
            '   │                                                           ',
            '   │                                                           ',
            '   │                                                           ',
            '   └───────┐       ┌───────────────────────┐       ┌───────────',
            '           │       │                       │       │           ',
            '           │       │                       │       │           ',
            '           │       │                       │       │           ',
            '   ┌───────┘       └───────┐       ┌───────┘       └───────┐   ',
            '   │                       │       │                       │   ',
            '   │                       │       │                       │   ',
            '   │                       │       │                       │   ',
            '   │       ┌───────┐       │       │       ┌───────┐       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   └───────┘       └───────┘       └───────┘       └───────┘   ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 3, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=4 rotation=left', () => {
        let expected = [
            '                                                               ',
            ' ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐ ',
            ' │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ ',
            ' │   └───┘   │   │   └───┘   │   │   └───┘   │   │   └───┘   │ ',
            ' │           │   │           │   │           │   │           │ ',
            ' └───┐   ┌───┘   └───┐   ┌───┘   └───┐   ┌───┘   └───┐   ┌───┘ ',
            '     │   │           │   │           │   │           │   │     ',
            ' ┌───┘   └───────────┘   └───┐   ┌───┘   └───────────┘   └───┐ ',
            ' │                           │   │                           │ ',
            ' │   ┌───────┐   ┌───────┐   │   │   ┌───────┐   ┌───────┐   │ ',
            ' │   │       │   │       │   │   │   │       │   │       │   │ ',
            ' └───┘   ┌───┘   └───┐   └───┘   └───┘   ┌───┘   └───┐   └───┘ ',
            '         │           │                   │           │         ',
            ' ┌───┐   └───┐   ┌───┘   ┌───┐   ┌───┐   └───┐   ┌───┘   ┌───┐ ',
            ' │   │       │   │       │   │   │   │       │   │       │   │ ',
            ' │   └───────┘   └───────┘   └───┘   └───────┘   └───────┘   └─',
            ' │                                                             ',
            ' │   ┌───────┐   ┌───────┐   ┌───┐   ┌───────┐   ┌───────┐   ┌─',
            ' │   │       │   │       │   │   │   │       │   │       │   │ ',
            ' └───┘   ┌───┘   └───┐   └───┘   └───┘   ┌───┘   └───┐   └───┘ ',
            '         │           │                   │           │         ',
            ' ┌───┐   └───┐   ┌───┘   ┌───┐   ┌───┐   └───┐   ┌───┘   ┌───┐ ',
            ' │   │       │   │       │   │   │   │       │   │       │   │ ',
            ' │   └───────┘   └───────┘   │   │   └───────┘   └───────┘   │ ',
            ' │                           │   │                           │ ',
            ' └───┐   ┌───────────┐   ┌───┘   └───┐   ┌───────────┐   ┌───┘ ',
            '     │   │           │   │           │   │           │   │     ',
            ' ┌───┘   └───┐   ┌───┘   └───┐   ┌───┘   └───┐   ┌───┘   └───┐ ',
            ' │           │   │           │   │           │   │           │ ',
            ' │   ┌───┐   │   │   ┌───┐   │   │   ┌───┐   │   │   ┌───┐   │ ',
            ' │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ ',
            ' └───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘ ',
        ];

        let result = new MooreCurve().create(5, { step: 4, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=5 rotation=left', () => {
        let expected = [
            '┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐',
            '│ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │',
            '└─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘',
            '┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐',
            '│ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ └─┘ └───┘ └───┘ │ │ └───┘ └───┘ └─┘ └───┘ └───┘ │',
            '└─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘ └─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘',
            '┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐',
            '│ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │',
            '└─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘',
            '┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐',
            '│ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │',
            '└─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘',
            '┌─┘ └───┘ └───┘ └───┘ └───┘ └─────┘ └───┘ └───┘ └───┘ └───┘ └──',
            '└─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─────┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌──',
            '┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐',
            '│ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │',
            '└─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘',
            '┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐',
            '│ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │',
            '└─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘',
            '┌─┘ └───┘ └───┘ └───┘ └───┘ └─┐ ┌─┘ └───┘ └───┘ └───┘ └───┘ └─┐',
            '│ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ │ │ └───┘ └───┘ │ │ └───┘ └───┘ │ │ └───┘ └───┘ │',
            '└─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘',
            '┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐',
            '│ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │',
            '└─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘',
        ];

        let result = new MooreCurve().create(5, { step: 5, rotation: 'left' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 rotation=right', () => {
        let expected = [
            '──┐',
            '──┘',
        ];

        let result = new MooreCurve().create(1, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 rotation=right', () => {
        let expected = [
            '┌─┐ ┌─┐',
            '┘ └─┘ │',
            '┐ ┌─┐ │',
            '└─┘ └─┘',
        ];

        let result = new MooreCurve().create(2, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 rotation=right', () => {
        let expected = [
            '┌─┐ ┌─┐ ┌─┐ ┌─┐',
            '│ └─┘ │ │ └─┘ │',
            '└─┐ ┌─┘ └─┐ ┌─┘',
            '──┘ └─────┘ └─┐',
            '──┐ ┌─────┐ ┌─┘',
            '┌─┘ └─┐ ┌─┘ └─┐',
            '│ ┌─┐ │ │ ┌─┐ │',
            '└─┘ └─┘ └─┘ └─┘',
        ];

        let result = new MooreCurve().create(3, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=4 rotation=right', () => {
        let expected = [
            '┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐',
            '│ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │',
            '└─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘',
            '┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐',
            '│ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '┘ └───┘ └───┘ └─┘ └───┘ └───┘ │',
            '┐ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ │ │ └───┘ └───┘ │',
            '└─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘',
            '┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐',
            '│ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │',
            '└─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘',
        ];

        let result = new MooreCurve().create(4, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 rotation=right', () => {
        let expected = [
            '┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐',
            '│ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │',
            '└─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘',
            '┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐',
            '│ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ └─┘ └───┘ └───┘ │ │ └───┘ └───┘ └─┘ └───┘ └───┘ │',
            '└─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘ └─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘',
            '┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐',
            '│ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │',
            '└─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘',
            '┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐',
            '│ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │',
            '└─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘',
            '──┘ └───┘ └───┘ └───┘ └───┘ └─────┘ └───┘ └───┘ └───┘ └───┘ └─┐',
            '──┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─────┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘',
            '┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐',
            '│ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │',
            '└─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘',
            '┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐',
            '│ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │',
            '└─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘',
            '┌─┘ └───┘ └───┘ └───┘ └───┘ └─┐ ┌─┘ └───┘ └───┘ └───┘ └───┘ └─┐',
            '│ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ │ │ └───┘ └───┘ │ │ └───┘ └───┘ │ │ └───┘ └───┘ │',
            '└─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘',
            '┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐',
            '│ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │',
            '└─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘',
        ];

        let result = new MooreCurve().create(5, { rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=1 rotation=right', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '               ────────────────────────────────┐               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '                                               │               ',
            '               ────────────────────────────────┘               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 1, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=2 rotation=right', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '       ┌───────────────┐               ┌───────────────┐       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '───────┘               └───────────────┘               │       ',
            '                                                       │       ',
            '                                                       │       ',
            '                                                       │       ',
            '                                                       │       ',
            '                                                       │       ',
            '                                                       │       ',
            '                                                       │       ',
            '───────┐               ┌───────────────┐               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       │               │               │               │       ',
            '       └───────────────┘               └───────────────┘       ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 2, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=3 rotation=right', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '   ┌───────┐       ┌───────┐       ┌───────┐       ┌───────┐   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       └───────┘       │       │       └───────┘       │   ',
            '   │                       │       │                       │   ',
            '   │                       │       │                       │   ',
            '   │                       │       │                       │   ',
            '   └───────┐       ┌───────┘       └───────┐       ┌───────┘   ',
            '           │       │                       │       │           ',
            '           │       │                       │       │           ',
            '           │       │                       │       │           ',
            '───────────┘       └───────────────────────┘       └───────┐   ',
            '                                                           │   ',
            '                                                           │   ',
            '                                                           │   ',
            '───────────┐       ┌───────────────────────┐       ┌───────┘   ',
            '           │       │                       │       │           ',
            '           │       │                       │       │           ',
            '           │       │                       │       │           ',
            '   ┌───────┘       └───────┐       ┌───────┘       └───────┐   ',
            '   │                       │       │                       │   ',
            '   │                       │       │                       │   ',
            '   │                       │       │                       │   ',
            '   │       ┌───────┐       │       │       ┌───────┐       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   │       │       │       │       │       │       │       │   ',
            '   └───────┘       └───────┘       └───────┘       └───────┘   ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 3, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=4 rotation=right', () => {
        let expected = [
            '                                                               ',
            ' ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐   ┌───┐ ',
            ' │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ ',
            ' │   └───┘   │   │   └───┘   │   │   └───┘   │   │   └───┘   │ ',
            ' │           │   │           │   │           │   │           │ ',
            ' └───┐   ┌───┘   └───┐   ┌───┘   └───┐   ┌───┘   └───┐   ┌───┘ ',
            '     │   │           │   │           │   │           │   │     ',
            ' ┌───┘   └───────────┘   └───┐   ┌───┘   └───────────┘   └───┐ ',
            ' │                           │   │                           │ ',
            ' │   ┌───────┐   ┌───────┐   │   │   ┌───────┐   ┌───────┐   │ ',
            ' │   │       │   │       │   │   │   │       │   │       │   │ ',
            ' └───┘   ┌───┘   └───┐   └───┘   └───┘   ┌───┘   └───┐   └───┘ ',
            '         │           │                   │           │         ',
            ' ┌───┐   └───┐   ┌───┘   ┌───┐   ┌───┐   └───┐   ┌───┘   ┌───┐ ',
            ' │   │       │   │       │   │   │   │       │   │       │   │ ',
            '─┘   └───────┘   └───────┘   └───┘   └───────┘   └───────┘   │ ',
            '                                                             │ ',
            '─┐   ┌───────┐   ┌───────┐   ┌───┐   ┌───────┐   ┌───────┐   │ ',
            ' │   │       │   │       │   │   │   │       │   │       │   │ ',
            ' └───┘   ┌───┘   └───┐   └───┘   └───┘   ┌───┘   └───┐   └───┘ ',
            '         │           │                   │           │         ',
            ' ┌───┐   └───┐   ┌───┘   ┌───┐   ┌───┐   └───┐   ┌───┘   ┌───┐ ',
            ' │   │       │   │       │   │   │   │       │   │       │   │ ',
            ' │   └───────┘   └───────┘   │   │   └───────┘   └───────┘   │ ',
            ' │                           │   │                           │ ',
            ' └───┐   ┌───────────┐   ┌───┘   └───┐   ┌───────────┐   ┌───┘ ',
            '     │   │           │   │           │   │           │   │     ',
            ' ┌───┘   └───┐   ┌───┘   └───┐   ┌───┘   └───┐   ┌───┘   └───┐ ',
            ' │           │   │           │   │           │   │           │ ',
            ' │   ┌───┐   │   │   ┌───┐   │   │   ┌───┐   │   │   ┌───┐   │ ',
            ' │   │   │   │   │   │   │   │   │   │   │   │   │   │   │   │ ',
            ' └───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘   └───┘ ',
        ];

        let result = new MooreCurve().create(5, { step: 4, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=5 rotation=right', () => {
        let expected = [
            '┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐',
            '│ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │',
            '└─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘',
            '┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐',
            '│ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ └─┘ └───┘ └───┘ │ │ └───┘ └───┘ └─┘ └───┘ └───┘ │',
            '└─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘ └─┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘',
            '┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐',
            '│ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │',
            '└─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘',
            '┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐',
            '│ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │',
            '└─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘',
            '──┘ └───┘ └───┘ └───┘ └───┘ └─────┘ └───┘ └───┘ └───┘ └───┘ └─┐',
            '──┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─────┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌─┘',
            '┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐',
            '│ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │',
            '└─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘ └───┘ │ └─┘ └─┘',
            '┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐',
            '│ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │',
            '└─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘',
            '┌─┘ └───┘ └───┘ └───┘ └───┘ └─┐ ┌─┘ └───┘ └───┘ └───┘ └───┘ └─┐',
            '│ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌─┐ ┌───┐ ┌───┐ │',
            '└─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘',
            '┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐',
            '│ └───┘ └───┘ │ │ └───┘ └───┘ │ │ └───┘ └───┘ │ │ └───┘ └───┘ │',
            '└─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘',
            '┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐',
            '│ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │',
            '└─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘',
        ];

        let result = new MooreCurve().create(5, { step: 5, rotation: 'right' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 rotation=flip', () => {
        let expected = [
            '│ │',
            '└─┘',
        ];

        let result = new MooreCurve().create(1, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 rotation=flip', () => {
        let expected = [
            '┌─┘ └─┐',
            '└─┐ ┌─┘',
            '┌─┘ └─┐',
            '└─────┘',
        ];

        let result = new MooreCurve().create(2, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 rotation=flip', () => {
        let expected = [
            '┌───┐ │ │ ┌───┐',
            '└─┐ └─┘ └─┘ ┌─┘',
            '┌─┘ ┌─┐ ┌─┐ └─┐',
            '└───┘ │ │ └───┘',
            '┌───┐ │ │ ┌───┐',
            '└─┐ └─┘ └─┘ ┌─┘',
            '┌─┘ ┌─┐ ┌─┐ └─┐',
            '└───┘ └─┘ └───┘',
        ];

        let result = new MooreCurve().create(3, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=4 rotation=flip', () => {
        let expected = [
            '┌───┐ ┌───┐ ┌─┘ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─────┘ └───┘ └───┘',
        ];

        let result = new MooreCurve().create(4, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 rotation=flip', () => {
        let expected = [
            '┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ │ └───┘ └───┘ │ │ └───┘ └───┘ │ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └───┘ └───┘ └───┘ │ │ └───┘ └───┘ └───┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ │ └───┘ └───┘ │ │ └───┘ └───┘ │ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └───┘ └───┘ └───┘ └─┘ └───┘ └───┘ └───┘ └───┘ └───┘',
        ];

        let result = new MooreCurve().create(5, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=1 rotation=flip', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               │                               │               ',
            '               └───────────────────────────────┘               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 1, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=2 rotation=flip', () => {
        let expected = [
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '       ┌───────────────┘               └───────────────┐       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       └───────────────┐               ┌───────────────┘       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '                       │               │                       ',
            '       ┌───────────────┘               └───────────────┐       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       │                                               │       ',
            '       └───────────────────────────────────────────────┘       ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 2, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=3 rotation=flip', () => {
        let expected = [
            '                           │       │                           ',
            '                           │       │                           ',
            '   ┌───────────────┐       │       │       ┌───────────────┐   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   └───────┐       └───────┘       └───────┘       ┌───────┘   ',
            '           │                                       │           ',
            '           │                                       │           ',
            '           │                                       │           ',
            '   ┌───────┘       ┌───────┐       ┌───────┐       └───────┐   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   └───────────────┘       │       │       └───────────────┘   ',
            '                           │       │                           ',
            '                           │       │                           ',
            '                           │       │                           ',
            '   ┌───────────────┐       │       │       ┌───────────────┐   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   └───────┐       └───────┘       └───────┘       ┌───────┘   ',
            '           │                                       │           ',
            '           │                                       │           ',
            '           │                                       │           ',
            '   ┌───────┘       ┌───────┐       ┌───────┐       └───────┐   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   │               │       │       │       │               │   ',
            '   └───────────────┘       └───────┘       └───────────────┘   ',
            '                                                               ',
        ];

        let result = new MooreCurve().create(5, { step: 3, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=4 rotation=flip', () => {
        let expected = [
            '                             │   │                             ',
            ' ┌───────┐   ┌───────┐   ┌───┘   └───┐   ┌───────┐   ┌───────┐ ',
            ' │       │   │       │   │           │   │       │   │       │ ',
            ' └───┐   └───┘   ┌───┘   └───┐   ┌───┘   └───┐   └───┘   ┌───┘ ',
            '     │           │           │   │           │           │     ',
            ' ┌───┘   ┌───┐   │   ┌───┐   │   │   ┌───┐   │   ┌───┐   └───┐ ',
            ' │       │   │   │   │   │   │   │   │   │   │   │   │       │ ',
            ' └───────┘   │   └───┘   └───┘   └───┘   └───┘   │   └───────┘ ',
            '             │                                   │             ',
            ' ┌───────┐   │   ┌───┐   ┌───┐   ┌───┐   ┌───┐   │   ┌───────┐ ',
            ' │       │   │   │   │   │   │   │   │   │   │   │   │       │ ',
            ' └───┐   └───┘   │   └───┘   │   │   └───┘   │   └───┘   ┌───┘ ',
            '     │           │           │   │           │           │     ',
            ' ┌───┘   ┌───┐   └───┐   ┌───┘   └───┐   ┌───┘   ┌───┐   └───┐ ',
            ' │       │   │       │   │           │   │       │   │       │ ',
            ' └───────┘   └───────┘   └───┐   ┌───┘   └───────┘   └───────┘ ',
            '                             │   │                             ',
            ' ┌───────┐   ┌───────┐   ┌───┘   └───┐   ┌───────┐   ┌───────┐ ',
            ' │       │   │       │   │           │   │       │   │       │ ',
            ' └───┐   └───┘   ┌───┘   └───┐   ┌───┘   └───┐   └───┘   ┌───┘ ',
            '     │           │           │   │           │           │     ',
            ' ┌───┘   ┌───┐   │   ┌───┐   │   │   ┌───┐   │   ┌───┐   └───┐ ',
            ' │       │   │   │   │   │   │   │   │   │   │   │   │       │ ',
            ' └───────┘   │   └───┘   └───┘   └───┘   └───┘   │   └───────┘ ',
            '             │                                   │             ',
            ' ┌───────┐   │   ┌───┐   ┌───┐   ┌───┐   ┌───┐   │   ┌───────┐ ',
            ' │       │   │   │   │   │   │   │   │   │   │   │   │       │ ',
            ' └───┐   └───┘   │   └───┘   │   │   └───┘   │   └───┘   ┌───┘ ',
            '     │           │           │   │           │           │     ',
            ' ┌───┘   ┌───┐   └───┐   ┌───┘   └───┐   ┌───┘   ┌───┐   └───┐ ',
            ' │       │   │       │   │           │   │       │   │       │ ',
            ' └───────┘   └───────┘   └───────────┘   └───────┘   └───────┘ ',
        ];

        let result = new MooreCurve().create(5, { step: 4, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=5 rotation=flip', () => {
        let expected = [
            '┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ │ └───┘ └───┘ │ │ └───┘ └───┘ │ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └───┘ └───┘ └───┘ │ │ └───┘ └───┘ └───┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ ┌───┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ │ └───┘ └───┘ │ │ └───┘ └───┘ │ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ └─┐ ┌─────┐ ┌─┘ └─┐ ┌─────┐ ┌─┘ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ │ ┌─┐ │ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └─┐ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ └─┘ ┌─┘ └───┘ └───┘',
            '┌───┐ ┌───┐ ┌─┘ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ ┌─┐ └─┐ ┌───┐ ┌───┐',
            '└─┐ └─┘ ┌─┘ └─┐ │ └─┘ │ │ └─┘ │ │ └─┘ │ │ └─┘ │ ┌─┘ └─┐ └─┘ ┌─┘',
            '┌─┘ ┌─┐ │ ┌─┐ │ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ └─┐ ┌─┘ │ ┌─┐ │ ┌─┐ └─┐',
            '└───┘ │ └─┘ └─┘ ┌─┘ └─────┘ └─┐ ┌─┘ └─────┘ └─┐ └─┘ └─┘ │ └───┘',
            '┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐ ┌───┐ │ │ ┌───┐ ┌───┐ │ ┌─┐ ┌─┐ │ ┌───┐',
            '└─┐ └─┘ │ └─┘ │ └─┘ ┌─┘ └─┐ └─┘ └─┘ ┌─┘ └─┐ └─┘ │ └─┘ │ └─┘ ┌─┘',
            '┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐ ┌─┘ ┌─┐ └─┐',
            '└───┘ └───┘ └───┘ └───┘ └───┘ └─┘ └───┘ └───┘ └───┘ └───┘ └───┘',
        ];

        let result = new MooreCurve().create(5, { step: 5, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });
});