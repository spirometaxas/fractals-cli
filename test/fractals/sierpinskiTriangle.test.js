const { SierpinskiTriangle } = require('../../src/fractals/sierpinskiTriangle');
const { Utils } = require('../../src/utils');

describe('SierpinskiTriangle Tests', () => {
    test('generate n=0', () => {
        let expected = [
            '▲',
        ];

        let result = new SierpinskiTriangle().create(0, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1', () => {
        let expected = [
            ' ▲ ',
            '▲ ▲',
        ];

        let result = new SierpinskiTriangle().create(1, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2', () => {
        let expected = [
            '   ▲   ',
            '  ▲ ▲  ',
            ' ▲   ▲ ',
            '▲ ▲ ▲ ▲',
        ];

        let result = new SierpinskiTriangle().create(2, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3', () => {
        let expected = [
            '       ▲       ',
            '      ▲ ▲      ',
            '     ▲   ▲     ',
            '    ▲ ▲ ▲ ▲    ',
            '   ▲       ▲   ',
            '  ▲ ▲     ▲ ▲  ',
            ' ▲   ▲   ▲   ▲ ',
            '▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲',
        ];

        let result = new SierpinskiTriangle().create(3, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=4', () => {
        let expected = [
            '               ▲               ',
            '              ▲ ▲              ',
            '             ▲   ▲             ',
            '            ▲ ▲ ▲ ▲            ',
            '           ▲       ▲           ',
            '          ▲ ▲     ▲ ▲          ',
            '         ▲   ▲   ▲   ▲         ',
            '        ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲        ',
            '       ▲               ▲       ',
            '      ▲ ▲             ▲ ▲      ',
            '     ▲   ▲           ▲   ▲     ',
            '    ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲    ',
            '   ▲       ▲       ▲       ▲   ',
            '  ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲  ',
            ' ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲ ',
            '▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲',
        ];

        let result = new SierpinskiTriangle().create(4, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5', () => {
        let expected = [
            '                               ▲                               ',
            '                              ▲ ▲                              ',
            '                             ▲   ▲                             ',
            '                            ▲ ▲ ▲ ▲                            ',
            '                           ▲       ▲                           ',
            '                          ▲ ▲     ▲ ▲                          ',
            '                         ▲   ▲   ▲   ▲                         ',
            '                        ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲                        ',
            '                       ▲               ▲                       ',
            '                      ▲ ▲             ▲ ▲                      ',
            '                     ▲   ▲           ▲   ▲                     ',
            '                    ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲                    ',
            '                   ▲       ▲       ▲       ▲                   ',
            '                  ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲                  ',
            '                 ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲                 ',
            '                ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲                ',
            '               ▲                               ▲               ',
            '              ▲ ▲                             ▲ ▲              ',
            '             ▲   ▲                           ▲   ▲             ',
            '            ▲ ▲ ▲ ▲                         ▲ ▲ ▲ ▲            ',
            '           ▲       ▲                       ▲       ▲           ',
            '          ▲ ▲     ▲ ▲                     ▲ ▲     ▲ ▲          ',
            '         ▲   ▲   ▲   ▲                   ▲   ▲   ▲   ▲         ',
            '        ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲                 ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲        ',
            '       ▲               ▲               ▲               ▲       ',
            '      ▲ ▲             ▲ ▲             ▲ ▲             ▲ ▲      ',
            '     ▲   ▲           ▲   ▲           ▲   ▲           ▲   ▲     ',
            '    ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲    ',
            '   ▲       ▲       ▲       ▲       ▲       ▲       ▲       ▲   ',
            '  ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲  ',
            ' ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲ ',
            '▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲',
        ];

        let result = new SierpinskiTriangle().create(5, {});
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=0', () => {
        let expected = [
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                             ▲▼▲▼▲                             ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                           ▲▼▲▼▲▼▲▼▲                           ',
            '                          ▲▼▲▼▲▼▲▼▲▼▲                          ',
            '                         ▲▼▲▼▲▼▲▼▲▼▲▼▲                         ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                       ',
            '                      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                      ',
            '                     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '               ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲               ',
            '              ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲              ',
            '             ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲             ',
            '            ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲            ',
            '           ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲           ',
            '          ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲          ',
            '         ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲         ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲       ',
            '      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲      ',
            '     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲     ',
            '    ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲    ',
            '   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ',
            '  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲  ',
            ' ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ',
            '▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 0 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=1', () => {
        let expected = [
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                             ▲▼▲▼▲                             ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                           ▲▼▲▼▲▼▲▼▲                           ',
            '                          ▲▼▲▼▲▼▲▼▲▼▲                          ',
            '                         ▲▼▲▼▲▼▲▼▲▼▲▼▲                         ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                       ',
            '                      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                      ',
            '                     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '               ▲                               ▲               ',
            '              ▲▼▲                             ▲▼▲              ',
            '             ▲▼▲▼▲                           ▲▼▲▼▲             ',
            '            ▲▼▲▼▲▼▲                         ▲▼▲▼▲▼▲            ',
            '           ▲▼▲▼▲▼▲▼▲                       ▲▼▲▼▲▼▲▼▲           ',
            '          ▲▼▲▼▲▼▲▼▲▼▲                     ▲▼▲▼▲▼▲▼▲▼▲          ',
            '         ▲▼▲▼▲▼▲▼▲▼▲▼▲                   ▲▼▲▼▲▼▲▼▲▼▲▼▲         ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲               ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲       ',
            '      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲             ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲      ',
            '     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲           ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲     ',
            '    ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲    ',
            '   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ',
            '  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲  ',
            ' ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ',
            '▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 1 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=2', () => {
        let expected = [
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                             ▲▼▲▼▲                             ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                           ▲▼▲▼▲▼▲▼▲                           ',
            '                          ▲▼▲▼▲▼▲▼▲▼▲                          ',
            '                         ▲▼▲▼▲▼▲▼▲▼▲▼▲                         ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                       ▲               ▲                       ',
            '                      ▲▼▲             ▲▼▲                      ',
            '                     ▲▼▲▼▲           ▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                 ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '               ▲                               ▲               ',
            '              ▲▼▲                             ▲▼▲              ',
            '             ▲▼▲▼▲                           ▲▼▲▼▲             ',
            '            ▲▼▲▼▲▼▲                         ▲▼▲▼▲▼▲            ',
            '           ▲▼▲▼▲▼▲▼▲                       ▲▼▲▼▲▼▲▼▲           ',
            '          ▲▼▲▼▲▼▲▼▲▼▲                     ▲▼▲▼▲▼▲▼▲▼▲          ',
            '         ▲▼▲▼▲▼▲▼▲▼▲▼▲                   ▲▼▲▼▲▼▲▼▲▼▲▼▲         ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '       ▲               ▲               ▲               ▲       ',
            '      ▲▼▲             ▲▼▲             ▲▼▲             ▲▼▲      ',
            '     ▲▼▲▼▲           ▲▼▲▼▲           ▲▼▲▼▲           ▲▼▲▼▲     ',
            '    ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲    ',
            '   ▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲   ',
            '  ▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲  ',
            ' ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲ ',
            '▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 2 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=3', () => {
        let expected = [
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                             ▲▼▲▼▲                             ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                           ▲       ▲                           ',
            '                          ▲▼▲     ▲▼▲                          ',
            '                         ▲▼▲▼▲   ▲▼▲▼▲                         ',
            '                        ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲                        ',
            '                       ▲               ▲                       ',
            '                      ▲▼▲             ▲▼▲                      ',
            '                     ▲▼▲▼▲           ▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲                    ',
            '                   ▲       ▲       ▲       ▲                   ',
            '                  ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲                  ',
            '                 ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲                ',
            '               ▲                               ▲               ',
            '              ▲▼▲                             ▲▼▲              ',
            '             ▲▼▲▼▲                           ▲▼▲▼▲             ',
            '            ▲▼▲▼▲▼▲                         ▲▼▲▼▲▼▲            ',
            '           ▲       ▲                       ▲       ▲           ',
            '          ▲▼▲     ▲▼▲                     ▲▼▲     ▲▼▲          ',
            '         ▲▼▲▼▲   ▲▼▲▼▲                   ▲▼▲▼▲   ▲▼▲▼▲         ',
            '        ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲                 ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲        ',
            '       ▲               ▲               ▲               ▲       ',
            '      ▲▼▲             ▲▼▲             ▲▼▲             ▲▼▲      ',
            '     ▲▼▲▼▲           ▲▼▲▼▲           ▲▼▲▼▲           ▲▼▲▼▲     ',
            '    ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲    ',
            '   ▲       ▲       ▲       ▲       ▲       ▲       ▲       ▲   ',
            '  ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲  ',
            ' ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲ ',
            '▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 3 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=4', () => {
        let expected = [
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                             ▲   ▲                             ',
            '                            ▲▼▲ ▲▼▲                            ',
            '                           ▲       ▲                           ',
            '                          ▲▼▲     ▲▼▲                          ',
            '                         ▲   ▲   ▲   ▲                         ',
            '                        ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲                        ',
            '                       ▲               ▲                       ',
            '                      ▲▼▲             ▲▼▲                      ',
            '                     ▲   ▲           ▲   ▲                     ',
            '                    ▲▼▲ ▲▼▲         ▲▼▲ ▲▼▲                    ',
            '                   ▲       ▲       ▲       ▲                   ',
            '                  ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲                  ',
            '                 ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲                 ',
            '                ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲                ',
            '               ▲                               ▲               ',
            '              ▲▼▲                             ▲▼▲              ',
            '             ▲   ▲                           ▲   ▲             ',
            '            ▲▼▲ ▲▼▲                         ▲▼▲ ▲▼▲            ',
            '           ▲       ▲                       ▲       ▲           ',
            '          ▲▼▲     ▲▼▲                     ▲▼▲     ▲▼▲          ',
            '         ▲   ▲   ▲   ▲                   ▲   ▲   ▲   ▲         ',
            '        ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲                 ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲        ',
            '       ▲               ▲               ▲               ▲       ',
            '      ▲▼▲             ▲▼▲             ▲▼▲             ▲▼▲      ',
            '     ▲   ▲           ▲   ▲           ▲   ▲           ▲   ▲     ',
            '    ▲▼▲ ▲▼▲         ▲▼▲ ▲▼▲         ▲▼▲ ▲▼▲         ▲▼▲ ▲▼▲    ',
            '   ▲       ▲       ▲       ▲       ▲       ▲       ▲       ▲   ',
            '  ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲  ',
            ' ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲ ',
            '▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 4 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=5', () => {
        let expected = [
            '                               ▲                               ',
            '                              ▲ ▲                              ',
            '                             ▲   ▲                             ',
            '                            ▲ ▲ ▲ ▲                            ',
            '                           ▲       ▲                           ',
            '                          ▲ ▲     ▲ ▲                          ',
            '                         ▲   ▲   ▲   ▲                         ',
            '                        ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲                        ',
            '                       ▲               ▲                       ',
            '                      ▲ ▲             ▲ ▲                      ',
            '                     ▲   ▲           ▲   ▲                     ',
            '                    ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲                    ',
            '                   ▲       ▲       ▲       ▲                   ',
            '                  ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲                  ',
            '                 ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲                 ',
            '                ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲                ',
            '               ▲                               ▲               ',
            '              ▲ ▲                             ▲ ▲              ',
            '             ▲   ▲                           ▲   ▲             ',
            '            ▲ ▲ ▲ ▲                         ▲ ▲ ▲ ▲            ',
            '           ▲       ▲                       ▲       ▲           ',
            '          ▲ ▲     ▲ ▲                     ▲ ▲     ▲ ▲          ',
            '         ▲   ▲   ▲   ▲                   ▲   ▲   ▲   ▲         ',
            '        ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲                 ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲        ',
            '       ▲               ▲               ▲               ▲       ',
            '      ▲ ▲             ▲ ▲             ▲ ▲             ▲ ▲      ',
            '     ▲   ▲           ▲   ▲           ▲   ▲           ▲   ▲     ',
            '    ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲         ▲ ▲ ▲ ▲    ',
            '   ▲       ▲       ▲       ▲       ▲       ▲       ▲       ▲   ',
            '  ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲     ▲ ▲  ',
            ' ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲ ',
            '▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 5 });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 inverse=true', () => {
        let expected = [
            ' ',
        ];

        let result = new SierpinskiTriangle().create(0, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 inverse=true', () => {
        let expected = [
            '   ',
            ' ▼ ',
        ];

        let result = new SierpinskiTriangle().create(1, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 inverse=true', () => {
        let expected = [
            '       ',
            '   ▼   ',
            '  ▼▲▼  ',
            ' ▼ ▼ ▼ ',
        ];

        let result = new SierpinskiTriangle().create(2, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 inverse=true', () => {
        let expected = [
            '               ',
            '       ▼       ',
            '      ▼▲▼      ',
            '     ▼ ▼ ▼     ',
            '    ▼▲▼▲▼▲▼    ',
            '   ▼ ▼▲▼▲▼ ▼   ',
            '  ▼▲▼ ▼▲▼ ▼▲▼  ',
            ' ▼ ▼ ▼ ▼ ▼ ▼ ▼ ',
        ];

        let result = new SierpinskiTriangle().create(3, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=4 inverse=true', () => {
        let expected = [
            '                               ',
            '               ▼               ',
            '              ▼▲▼              ',
            '             ▼ ▼ ▼             ',
            '            ▼▲▼▲▼▲▼            ',
            '           ▼ ▼▲▼▲▼ ▼           ',
            '          ▼▲▼ ▼▲▼ ▼▲▼          ',
            '         ▼ ▼ ▼ ▼ ▼ ▼ ▼         ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '       ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼       ',
            '      ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼      ',
            '     ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼     ',
            '    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼    ',
            '   ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼   ',
            '  ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼  ',
            ' ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ',
        ];

        let result = new SierpinskiTriangle().create(4, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 inverse=true', () => {
        let expected = [
            '                                                               ',
            '                               ▼                               ',
            '                              ▼▲▼                              ',
            '                             ▼ ▼ ▼                             ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                           ▼ ▼▲▼▲▼ ▼                           ',
            '                          ▼▲▼ ▼▲▼ ▼▲▼                          ',
            '                         ▼ ▼ ▼ ▼ ▼ ▼ ▼                         ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                       ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼                       ',
            '                      ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼                      ',
            '                     ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼                     ',
            '                    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼                    ',
            '                   ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼                   ',
            '                  ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼                  ',
            '                 ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼                 ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '               ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼               ',
            '              ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼              ',
            '             ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼             ',
            '            ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼            ',
            '           ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼           ',
            '          ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼          ',
            '         ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼         ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '       ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼       ',
            '      ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼      ',
            '     ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼     ',
            '    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼    ',
            '   ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼   ',
            '  ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼  ',
            ' ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ',
        ];

        let result = new SierpinskiTriangle().create(5, { inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=0 inverse=true', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 0, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=1 inverse=true', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                     ',
            '                      ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                      ',
            '                       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                       ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                         ▼▲▼▲▼▲▼▲▼▲▼▲▼                         ',
            '                          ▼▲▼▲▼▲▼▲▼▲▼                          ',
            '                           ▼▲▼▲▼▲▼▲▼                           ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                             ▼▲▼▲▼                             ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 1, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=2 inverse=true', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                         ▼▲▼▲▼▲▼▲▼▲▼▲▼                         ',
            '                          ▼▲▼▲▼▲▼▲▼▲▼                          ',
            '                           ▼▲▼▲▼▲▼▲▼                           ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                             ▼▲▼▲▼                             ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                     ',
            '                      ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                      ',
            '                       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                       ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '         ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼         ',
            '          ▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼          ',
            '           ▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼           ',
            '            ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼            ',
            '             ▼▲▼▲▼           ▼▲▼▲▼           ▼▲▼▲▼             ',
            '              ▼▲▼             ▼▲▼             ▼▲▼              ',
            '               ▼               ▼               ▼               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 2, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=3 inverse=true', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                             ▼▲▼▲▼                             ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                         ▼▲▼▲▼▲▼▲▼▲▼▲▼                         ',
            '                          ▼▲▼▲▼▲▼▲▼▲▼                          ',
            '                           ▼▲▼▲▼▲▼▲▼                           ',
            '                    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼                     ',
            '                      ▼▲▼     ▼▲▼     ▼▲▼                      ',
            '                       ▼       ▼       ▼                       ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '            ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼            ',
            '             ▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼             ',
            '              ▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼              ',
            '               ▼       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼       ▼               ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '         ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼         ',
            '          ▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼          ',
            '           ▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼           ',
            '    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼    ',
            '     ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼     ',
            '      ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼      ',
            '       ▼       ▼       ▼       ▼       ▼       ▼       ▼       ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 3, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=4 inverse=true', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                             ▼▲▼▲▼                             ',
            '                          ▼▲▼ ▼▲▼ ▼▲▼                          ',
            '                           ▼   ▼   ▼                           ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                         ▼▲▼▲▼▲▼▲▼▲▼▲▼                         ',
            '                      ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼                      ',
            '                       ▼   ▼▲▼▲▼▲▼▲▼   ▼                       ',
            '                    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼                     ',
            '                  ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼                  ',
            '                   ▼   ▼   ▼   ▼   ▼   ▼   ▼                   ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ',
            '              ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼              ',
            '               ▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼               ',
            '            ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼            ',
            '             ▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼             ',
            '          ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼          ',
            '           ▼   ▼   ▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼   ▼   ▼           ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '         ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼         ',
            '      ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼      ',
            '       ▼   ▼▲▼▲▼▲▼▲▼   ▼   ▼▲▼▲▼▲▼▲▼   ▼   ▼▲▼▲▼▲▼▲▼   ▼       ',
            '    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼    ',
            '     ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼     ',
            '  ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼  ',
            '   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 4, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=5 inverse=true', () => {
        let expected = [
            '                                                               ',
            '                               ▼                               ',
            '                              ▼▲▼                              ',
            '                             ▼ ▼ ▼                             ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                           ▼ ▼▲▼▲▼ ▼                           ',
            '                          ▼▲▼ ▼▲▼ ▼▲▼                          ',
            '                         ▼ ▼ ▼ ▼ ▼ ▼ ▼                         ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                       ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼                       ',
            '                      ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼                      ',
            '                     ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼                     ',
            '                    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼                    ',
            '                   ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼                   ',
            '                  ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼                  ',
            '                 ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼                 ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '               ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼               ',
            '              ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼              ',
            '             ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼             ',
            '            ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼            ',
            '           ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼           ',
            '          ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼          ',
            '         ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼         ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '       ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼       ',
            '      ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼      ',
            '     ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼ ▼▲▼▲▼▲▼▲▼ ▼ ▼ ▼     ',
            '    ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼    ',
            '   ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼ ▼▲▼▲▼ ▼   ',
            '  ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼  ',
            ' ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 5, inverse: true });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 rotation=flip', () => {
        let expected = [
            '▼',
        ];

        let result = new SierpinskiTriangle().create(0, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 rotation=flip', () => {
        let expected = [
            '▼ ▼',
            ' ▼ ',
        ];

        let result = new SierpinskiTriangle().create(1, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 rotation=flip', () => {
        let expected = [
            '▼ ▼ ▼ ▼',
            ' ▼   ▼ ',
            '  ▼ ▼  ',
            '   ▼   ',
        ];

        let result = new SierpinskiTriangle().create(2, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 rotation=flip', () => {
        let expected = [
            '▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼',
            ' ▼   ▼   ▼   ▼ ',
            '  ▼ ▼     ▼ ▼  ',
            '   ▼       ▼   ',
            '    ▼ ▼ ▼ ▼    ',
            '     ▼   ▼     ',
            '      ▼ ▼      ',
            '       ▼       ',
        ];

        let result = new SierpinskiTriangle().create(3, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=4 rotation=flip', () => {
        let expected = [
            '▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼',
            ' ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼ ',
            '  ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼  ',
            '   ▼       ▼       ▼       ▼   ',
            '    ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼    ',
            '     ▼   ▼           ▼   ▼     ',
            '      ▼ ▼             ▼ ▼      ',
            '       ▼               ▼       ',
            '        ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼        ',
            '         ▼   ▼   ▼   ▼         ',
            '          ▼ ▼     ▼ ▼          ',
            '           ▼       ▼           ',
            '            ▼ ▼ ▼ ▼            ',
            '             ▼   ▼             ',
            '              ▼ ▼              ',
            '               ▼               ',
        ];

        let result = new SierpinskiTriangle().create(4, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 rotation=flip', () => {
        let expected = [
            '▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼',
            ' ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼ ',
            '  ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼  ',
            '   ▼       ▼       ▼       ▼       ▼       ▼       ▼       ▼   ',
            '    ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼    ',
            '     ▼   ▼           ▼   ▼           ▼   ▼           ▼   ▼     ',
            '      ▼ ▼             ▼ ▼             ▼ ▼             ▼ ▼      ',
            '       ▼               ▼               ▼               ▼       ',
            '        ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼                 ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼        ',
            '         ▼   ▼   ▼   ▼                   ▼   ▼   ▼   ▼         ',
            '          ▼ ▼     ▼ ▼                     ▼ ▼     ▼ ▼          ',
            '           ▼       ▼                       ▼       ▼           ',
            '            ▼ ▼ ▼ ▼                         ▼ ▼ ▼ ▼            ',
            '             ▼   ▼                           ▼   ▼             ',
            '              ▼ ▼                             ▼ ▼              ',
            '               ▼                               ▼               ',
            '                ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼                ',
            '                 ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼                 ',
            '                  ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼                  ',
            '                   ▼       ▼       ▼       ▼                   ',
            '                    ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼                    ',
            '                     ▼   ▼           ▼   ▼                     ',
            '                      ▼ ▼             ▼ ▼                      ',
            '                       ▼               ▼                       ',
            '                        ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼                        ',
            '                         ▼   ▼   ▼   ▼                         ',
            '                          ▼ ▼     ▼ ▼                          ',
            '                           ▼       ▼                           ',
            '                            ▼ ▼ ▼ ▼                            ',
            '                             ▼   ▼                             ',
            '                              ▼ ▼                              ',
            '                               ▼                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=0 rotation=flip', () => {
        let expected = [
            '▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼',
            ' ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ',
            '  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼  ',
            '   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ',
            '    ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼    ',
            '     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼     ',
            '      ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼      ',
            '       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼       ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '         ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼         ',
            '          ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼          ',
            '           ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼           ',
            '            ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼            ',
            '             ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼             ',
            '              ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼              ',
            '               ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼               ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                     ',
            '                      ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                      ',
            '                       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                       ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                         ▼▲▼▲▼▲▼▲▼▲▼▲▼                         ',
            '                          ▼▲▼▲▼▲▼▲▼▲▼                          ',
            '                           ▼▲▼▲▼▲▼▲▼                           ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                             ▼▲▼▲▼                             ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 0, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=1 rotation=flip', () => {
        let expected = [
            '▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼',
            ' ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ',
            '  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼  ',
            '   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼   ',
            '    ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼    ',
            '     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼           ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼     ',
            '      ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼             ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼      ',
            '       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼               ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼       ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '         ▼▲▼▲▼▲▼▲▼▲▼▲▼                   ▼▲▼▲▼▲▼▲▼▲▼▲▼         ',
            '          ▼▲▼▲▼▲▼▲▼▲▼                     ▼▲▼▲▼▲▼▲▼▲▼          ',
            '           ▼▲▼▲▼▲▼▲▼                       ▼▲▼▲▼▲▼▲▼           ',
            '            ▼▲▼▲▼▲▼                         ▼▲▼▲▼▲▼            ',
            '             ▼▲▼▲▼                           ▼▲▼▲▼             ',
            '              ▼▲▼                             ▼▲▼              ',
            '               ▼                               ▼               ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                     ',
            '                      ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                      ',
            '                       ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                       ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                         ▼▲▼▲▼▲▼▲▼▲▼▲▼                         ',
            '                          ▼▲▼▲▼▲▼▲▼▲▼                          ',
            '                           ▼▲▼▲▼▲▼▲▼                           ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                             ▼▲▼▲▼                             ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 1, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=2 rotation=flip', () => {
        let expected = [
            '▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼',
            ' ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼ ',
            '  ▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼  ',
            '   ▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼   ',
            '    ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼    ',
            '     ▼▲▼▲▼           ▼▲▼▲▼           ▼▲▼▲▼           ▼▲▼▲▼     ',
            '      ▼▲▼             ▼▲▼             ▼▲▼             ▼▲▼      ',
            '       ▼               ▼               ▼               ▼       ',
            '        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼        ',
            '         ▼▲▼▲▼▲▼▲▼▲▼▲▼                   ▼▲▼▲▼▲▼▲▼▲▼▲▼         ',
            '          ▼▲▼▲▼▲▼▲▼▲▼                     ▼▲▼▲▼▲▼▲▼▲▼          ',
            '           ▼▲▼▲▼▲▼▲▼                       ▼▲▼▲▼▲▼▲▼           ',
            '            ▼▲▼▲▼▲▼                         ▼▲▼▲▼▲▼            ',
            '             ▼▲▼▲▼                           ▼▲▼▲▼             ',
            '              ▼▲▼                             ▼▲▼              ',
            '               ▼                               ▼               ',
            '                ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼▲▼▲▼▲▼▲▼   ▼▲▼▲▼▲▼▲▼▲▼▲▼                 ',
            '                  ▼▲▼▲▼▲▼▲▼▲▼     ▼▲▼▲▼▲▼▲▼▲▼                  ',
            '                   ▼▲▼▲▼▲▼▲▼       ▼▲▼▲▼▲▼▲▼                   ',
            '                    ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼           ▼▲▼▲▼                     ',
            '                      ▼▲▼             ▼▲▼                      ',
            '                       ▼               ▼                       ',
            '                        ▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼                        ',
            '                         ▼▲▼▲▼▲▼▲▼▲▼▲▼                         ',
            '                          ▼▲▼▲▼▲▼▲▼▲▼                          ',
            '                           ▼▲▼▲▼▲▼▲▼                           ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                             ▼▲▼▲▼                             ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 2, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=3 rotation=flip', () => {
        let expected = [
            '▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼',
            ' ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼ ',
            '  ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼  ',
            '   ▼       ▼       ▼       ▼       ▼       ▼       ▼       ▼   ',
            '    ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼    ',
            '     ▼▲▼▲▼           ▼▲▼▲▼           ▼▲▼▲▼           ▼▲▼▲▼     ',
            '      ▼▲▼             ▼▲▼             ▼▲▼             ▼▲▼      ',
            '       ▼               ▼               ▼               ▼       ',
            '        ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼                 ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼        ',
            '         ▼▲▼▲▼   ▼▲▼▲▼                   ▼▲▼▲▼   ▼▲▼▲▼         ',
            '          ▼▲▼     ▼▲▼                     ▼▲▼     ▼▲▼          ',
            '           ▼       ▼                       ▼       ▼           ',
            '            ▼▲▼▲▼▲▼                         ▼▲▼▲▼▲▼            ',
            '             ▼▲▼▲▼                           ▼▲▼▲▼             ',
            '              ▼▲▼                             ▼▲▼              ',
            '               ▼                               ▼               ',
            '                ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼                ',
            '                 ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼   ▼▲▼▲▼                 ',
            '                  ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼                  ',
            '                   ▼       ▼       ▼       ▼                   ',
            '                    ▼▲▼▲▼▲▼         ▼▲▼▲▼▲▼                    ',
            '                     ▼▲▼▲▼           ▼▲▼▲▼                     ',
            '                      ▼▲▼             ▼▲▼                      ',
            '                       ▼               ▼                       ',
            '                        ▼▲▼▲▼▲▼ ▼▲▼▲▼▲▼                        ',
            '                         ▼▲▼▲▼   ▼▲▼▲▼                         ',
            '                          ▼▲▼     ▼▲▼                          ',
            '                           ▼       ▼                           ',
            '                            ▼▲▼▲▼▲▼                            ',
            '                             ▼▲▼▲▼                             ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 3, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=4 rotation=flip', () => {
        let expected = [
            '▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼',
            ' ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼ ',
            '  ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼  ',
            '   ▼       ▼       ▼       ▼       ▼       ▼       ▼       ▼   ',
            '    ▼▲▼ ▼▲▼         ▼▲▼ ▼▲▼         ▼▲▼ ▼▲▼         ▼▲▼ ▼▲▼    ',
            '     ▼   ▼           ▼   ▼           ▼   ▼           ▼   ▼     ',
            '      ▼▲▼             ▼▲▼             ▼▲▼             ▼▲▼      ',
            '       ▼               ▼               ▼               ▼       ',
            '        ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼                 ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼        ',
            '         ▼   ▼   ▼   ▼                   ▼   ▼   ▼   ▼         ',
            '          ▼▲▼     ▼▲▼                     ▼▲▼     ▼▲▼          ',
            '           ▼       ▼                       ▼       ▼           ',
            '            ▼▲▼ ▼▲▼                         ▼▲▼ ▼▲▼            ',
            '             ▼   ▼                           ▼   ▼             ',
            '              ▼▲▼                             ▼▲▼              ',
            '               ▼                               ▼               ',
            '                ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼                ',
            '                 ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼                 ',
            '                  ▼▲▼     ▼▲▼     ▼▲▼     ▼▲▼                  ',
            '                   ▼       ▼       ▼       ▼                   ',
            '                    ▼▲▼ ▼▲▼         ▼▲▼ ▼▲▼                    ',
            '                     ▼   ▼           ▼   ▼                     ',
            '                      ▼▲▼             ▼▲▼                      ',
            '                       ▼               ▼                       ',
            '                        ▼▲▼ ▼▲▼ ▼▲▼ ▼▲▼                        ',
            '                         ▼   ▼   ▼   ▼                         ',
            '                          ▼▲▼     ▼▲▼                          ',
            '                           ▼       ▼                           ',
            '                            ▼▲▼ ▼▲▼                            ',
            '                             ▼   ▼                             ',
            '                              ▼▲▼                              ',
            '                               ▼                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 4, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=5 rotation=flip', () => {
        let expected = [
            '▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼',
            ' ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼ ',
            '  ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼  ',
            '   ▼       ▼       ▼       ▼       ▼       ▼       ▼       ▼   ',
            '    ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼    ',
            '     ▼   ▼           ▼   ▼           ▼   ▼           ▼   ▼     ',
            '      ▼ ▼             ▼ ▼             ▼ ▼             ▼ ▼      ',
            '       ▼               ▼               ▼               ▼       ',
            '        ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼                 ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼        ',
            '         ▼   ▼   ▼   ▼                   ▼   ▼   ▼   ▼         ',
            '          ▼ ▼     ▼ ▼                     ▼ ▼     ▼ ▼          ',
            '           ▼       ▼                       ▼       ▼           ',
            '            ▼ ▼ ▼ ▼                         ▼ ▼ ▼ ▼            ',
            '             ▼   ▼                           ▼   ▼             ',
            '              ▼ ▼                             ▼ ▼              ',
            '               ▼                               ▼               ',
            '                ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼                ',
            '                 ▼   ▼   ▼   ▼   ▼   ▼   ▼   ▼                 ',
            '                  ▼ ▼     ▼ ▼     ▼ ▼     ▼ ▼                  ',
            '                   ▼       ▼       ▼       ▼                   ',
            '                    ▼ ▼ ▼ ▼         ▼ ▼ ▼ ▼                    ',
            '                     ▼   ▼           ▼   ▼                     ',
            '                      ▼ ▼             ▼ ▼                      ',
            '                       ▼               ▼                       ',
            '                        ▼ ▼ ▼ ▼ ▼ ▼ ▼ ▼                        ',
            '                         ▼   ▼   ▼   ▼                         ',
            '                          ▼ ▼     ▼ ▼                          ',
            '                           ▼       ▼                           ',
            '                            ▼ ▼ ▼ ▼                            ',
            '                             ▼   ▼                             ',
            '                              ▼ ▼                              ',
            '                               ▼                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 5, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=0 inverse=true rotation=flip', () => {
        let expected = [
            ' ',
        ];

        let result = new SierpinskiTriangle().create(0, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=1 inverse=true rotation=flip', () => {
        let expected = [
            ' ▲ ',
            '   ',
        ];

        let result = new SierpinskiTriangle().create(1, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=2 inverse=true rotation=flip', () => {
        let expected = [
            ' ▲ ▲ ▲ ',
            '  ▲▼▲  ',
            '   ▲   ',
            '       ',
        ];

        let result = new SierpinskiTriangle().create(2, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=3 inverse=true rotation=flip', () => {
        let expected = [
            ' ▲ ▲ ▲ ▲ ▲ ▲ ▲ ',
            '  ▲▼▲ ▲▼▲ ▲▼▲  ',
            '   ▲ ▲▼▲▼▲ ▲   ',
            '    ▲▼▲▼▲▼▲    ',
            '     ▲ ▲ ▲     ',
            '      ▲▼▲      ',
            '       ▲       ',
            '               ',
        ];

        let result = new SierpinskiTriangle().create(3, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=4 inverse=true rotation=flip', () => {
        let expected = [
            ' ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ',
            '  ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲  ',
            '   ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲   ',
            '    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲    ',
            '     ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲     ',
            '      ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲      ',
            '       ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲       ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '         ▲ ▲ ▲ ▲ ▲ ▲ ▲         ',
            '          ▲▼▲ ▲▼▲ ▲▼▲          ',
            '           ▲ ▲▼▲▼▲ ▲           ',
            '            ▲▼▲▼▲▼▲            ',
            '             ▲ ▲ ▲             ',
            '              ▲▼▲              ',
            '               ▲               ',
            '                               ',
        ];

        let result = new SierpinskiTriangle().create(4, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 inverse=true rotation=flip', () => {
        let expected = [
            ' ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ',
            '  ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲  ',
            '   ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲   ',
            '    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲    ',
            '     ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲     ',
            '      ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲      ',
            '       ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲       ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '         ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲         ',
            '          ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲          ',
            '           ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲           ',
            '            ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲            ',
            '             ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲             ',
            '              ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲              ',
            '               ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲               ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '                 ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲                 ',
            '                  ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲                  ',
            '                   ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲                   ',
            '                    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲                    ',
            '                     ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲                     ',
            '                      ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲                      ',
            '                       ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲                       ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                         ▲ ▲ ▲ ▲ ▲ ▲ ▲                         ',
            '                          ▲▼▲ ▲▼▲ ▲▼▲                          ',
            '                           ▲ ▲▼▲▼▲ ▲                           ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                             ▲ ▲ ▲                             ',
            '                              ▲▼▲                              ',
            '                               ▲                               ',
            '                                                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=0 inverse=true rotation=flip', () => {
        let expected = [
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 0, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=1 inverse=true rotation=flip', () => {
        let expected = [
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                             ▲▼▲▼▲                             ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                           ▲▼▲▼▲▼▲▼▲                           ',
            '                          ▲▼▲▼▲▼▲▼▲▼▲                          ',
            '                         ▲▼▲▼▲▼▲▼▲▼▲▼▲                         ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                       ',
            '                      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                      ',
            '                     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 1, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=2 inverse=true rotation=flip', () => {
        let expected = [
            '               ▲               ▲               ▲               ',
            '              ▲▼▲             ▲▼▲             ▲▼▲              ',
            '             ▲▼▲▼▲           ▲▼▲▼▲           ▲▼▲▼▲             ',
            '            ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲         ▲▼▲▼▲▼▲            ',
            '           ▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲           ',
            '          ▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲          ',
            '         ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲         ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '                       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                       ',
            '                      ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                      ',
            '                     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                    ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                             ▲▼▲▼▲                             ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                           ▲▼▲▼▲▼▲▼▲                           ',
            '                          ▲▼▲▼▲▼▲▼▲▼▲                          ',
            '                         ▲▼▲▼▲▼▲▼▲▼▲▼▲                         ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 2, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=3 inverse=true rotation=flip', () => {
        let expected = [
            '       ▲       ▲       ▲       ▲       ▲       ▲       ▲       ',
            '      ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲     ▲▼▲      ',
            '     ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲     ',
            '    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲    ',
            '           ▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲       ▲▼▲▼▲▼▲▼▲           ',
            '          ▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲          ',
            '         ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲         ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '               ▲       ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲       ▲               ',
            '              ▲▼▲     ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲     ▲▼▲              ',
            '             ▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲             ',
            '            ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲            ',
            '                   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                   ',
            '                  ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                  ',
            '                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '                       ▲       ▲       ▲                       ',
            '                      ▲▼▲     ▲▼▲     ▲▼▲                      ',
            '                     ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲                    ',
            '                           ▲▼▲▼▲▼▲▼▲                           ',
            '                          ▲▼▲▼▲▼▲▼▲▼▲                          ',
            '                         ▲▼▲▼▲▼▲▼▲▼▲▼▲                         ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                             ▲▼▲▼▲                             ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 3, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=4 inverse=true rotation=flip', () => {
        let expected = [
            '   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ▲   ',
            '  ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲  ',
            '     ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲     ',
            '    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲    ',
            '       ▲   ▲▼▲▼▲▼▲▼▲   ▲   ▲▼▲▼▲▼▲▼▲   ▲   ▲▼▲▼▲▼▲▼▲   ▲       ',
            '      ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲      ',
            '         ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲         ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '           ▲   ▲   ▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲   ▲   ▲           ',
            '          ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲          ',
            '             ▲▼▲▼▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲▼▲▼▲             ',
            '            ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲            ',
            '               ▲   ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲   ▲               ',
            '              ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲              ',
            '                 ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                 ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '                   ▲   ▲   ▲   ▲   ▲   ▲   ▲                   ',
            '                  ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲                  ',
            '                     ▲▼▲▼▲   ▲▼▲▼▲   ▲▼▲▼▲                     ',
            '                    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲                    ',
            '                       ▲   ▲▼▲▼▲▼▲▼▲   ▲                       ',
            '                      ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲                      ',
            '                         ▲▼▲▼▲▼▲▼▲▼▲▼▲                         ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                           ▲   ▲   ▲                           ',
            '                          ▲▼▲ ▲▼▲ ▲▼▲                          ',
            '                             ▲▼▲▼▲                             ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                               ▲                               ',
            '                              ▲▼▲                              ',
            '                                                               ',
            '                                                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 4, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });


    test('generate n=5 step=5 inverse=true rotation=flip', () => {
        let expected = [
            ' ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ',
            '  ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲  ',
            '   ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲   ',
            '    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲    ',
            '     ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲     ',
            '      ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲      ',
            '       ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲       ',
            '        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲        ',
            '         ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲         ',
            '          ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲          ',
            '           ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲           ',
            '            ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲            ',
            '             ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲             ',
            '              ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲              ',
            '               ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲               ',
            '                ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                ',
            '                 ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲ ▲                 ',
            '                  ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲ ▲▼▲                  ',
            '                   ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲ ▲▼▲▼▲ ▲                   ',
            '                    ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲ ▲▼▲▼▲▼▲                    ',
            '                     ▲ ▲ ▲ ▲▼▲▼▲▼▲▼▲ ▲ ▲ ▲                     ',
            '                      ▲▼▲ ▲▼▲▼▲▼▲▼▲▼▲ ▲▼▲                      ',
            '                       ▲ ▲▼▲▼▲▼▲▼▲▼▲▼▲ ▲                       ',
            '                        ▲▼▲▼▲▼▲▼▲▼▲▼▲▼▲                        ',
            '                         ▲ ▲ ▲ ▲ ▲ ▲ ▲                         ',
            '                          ▲▼▲ ▲▼▲ ▲▼▲                          ',
            '                           ▲ ▲▼▲▼▲ ▲                           ',
            '                            ▲▼▲▼▲▼▲                            ',
            '                             ▲ ▲ ▲                             ',
            '                              ▲▼▲                              ',
            '                               ▲                               ',
            '                                                               ',
        ];

        let result = new SierpinskiTriangle().create(5, { step: 5, inverse: true, rotation: 'flip' });
        expect(Utils.drawForTest(result)).toStrictEqual(expected);
    });

});